<?php  //[STAMP] 90af1bd742e1adfa8c749427c354d6a5
// phpcs:ignoreFile
namespace Tests\Support\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build

trait ApiTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds HTTP authentication via username/password.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amHttpAuthenticated()
     */
    public function amHttpAuthenticated(string $username, string $password): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amHttpAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a HTTP header to be used for all subsequent requests. Use [`unsetHttpHeader`](#unsetHttpHeader) to unset it.
     *
     * ```php
     * <?php
     * $I->haveHttpHeader('Content-Type', 'application/json');
     * // all next requests will contain this header
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::haveHttpHeader()
     */
    public function haveHttpHeader(string $name, string $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unsets a HTTP header (that was originally added by [haveHttpHeader()](#haveHttpHeader)),
     * so that subsequent requests will not send it anymore.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->sendGet('test-headers.php');
     * // ...
     * $I->unsetHttpHeader('X-Requested-With');
     * $I->sendPost('some-other-page.php');
     * ```
     *
     * @param string $name the name of the header to unset.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::unsetHttpHeader()
     */
    public function unsetHttpHeader(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('unsetHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated Use [unsetHttpHeader](#unsetHttpHeader) instead
     * @see \Codeception\Lib\InnerBrowser::deleteHeader()
     */
    public function deleteHeader(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('deleteHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens the page for the given relative URI.
     *
     * ```php
     * <?php
     * // opens front page
     * $I->amOnPage('/');
     * // opens /register page
     * $I->amOnPage('/register');
     * ```
     * @see \Codeception\Lib\InnerBrowser::amOnPage()
     */
    public function amOnPage(string $page): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnPage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Perform a click on a link or a button, given by a locator.
     * If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.
     * For buttons, the "value" attribute, "name" attribute, and inner text are searched.
     * For links, the link text is searched.
     * For images, the "alt" attribute and inner text of any parent links are searched.
     *
     * The second parameter is a context (CSS or XPath locator) to narrow the search.
     *
     * Note that if the locator matches a button of type `submit`, the form will be submitted.
     *
     * ```php
     * <?php
     * // simple link
     * $I->click('Logout');
     * // button of form
     * $I->click('Submit');
     * // CSS button
     * $I->click('#form input[type=submit]');
     * // XPath
     * $I->click('//form/*[@type="submit"]');
     * // link in context
     * $I->click('Logout', '#nav');
     * // using strict locator
     * $I->click(['link' => 'Login']);
     * ```
     * @param string|array $link
     * @see \Codeception\Lib\InnerBrowser::click()
     */
    public function click($link, $context = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('click', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ```php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function see(string $text, $selector = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('see', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ```php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function canSee(string $text, $selector = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('see', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function dontSee(string $text, $selector = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSee', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function cantSee(string $text, $selector = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSee', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     */
    public function seeInSource(string $raw): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     */
    public function canSeeInSource(string $raw): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     */
    public function dontSeeInSource(string $raw): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     */
    public function cantSeeInSource(string $raw): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ```php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     */
    public function seeLink(string $text, ?string $url = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ```php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     */
    public function canSeeLink(string $text, ?string $url = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ```php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     */
    public function dontSeeLink(string $text, string $url = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ```php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     */
    public function cantSeeLink(string $text, string $url = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current URI contains the given string.
     *
     * ```php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     */
    public function seeInCurrentUrl(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current URI contains the given string.
     *
     * ```php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     */
    public function canSeeInCurrentUrl(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URI doesn't contain the given string.
     *
     * ```php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     */
    public function dontSeeInCurrentUrl(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URI doesn't contain the given string.
     *
     * ```php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     */
    public function cantSeeInCurrentUrl(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     */
    public function seeCurrentUrlEquals(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     */
    public function canSeeCurrentUrlEquals(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     */
    public function dontSeeCurrentUrlEquals(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ```php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     */
    public function cantSeeCurrentUrlEquals(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL matches the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     */
    public function seeCurrentUrlMatches(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL matches the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     */
    public function canSeeCurrentUrlMatches(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url doesn't match the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     */
    public function dontSeeCurrentUrlMatches(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current url doesn't match the given regular expression.
     *
     * ```php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     */
    public function cantSeeCurrentUrlMatches(string $uri): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes the given regular expression against the current URI and returns the first capturing group.
     * If no parameters are provided, the full URI is returned.
     *
     * ```php
     * <?php
     * $user_id = $I->grabFromCurrentUrl('~^/user/(\d+)/~');
     * $uri = $I->grabFromCurrentUrl();
     * ```
     * @see \Codeception\Lib\InnerBrowser::grabFromCurrentUrl()
     */
    public function grabFromCurrentUrl(?string $uri = NULL): mixed {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the specified checkbox is checked.
     *
     * ```php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     */
    public function seeCheckboxIsChecked($checkbox): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the specified checkbox is checked.
     *
     * ```php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     */
    public function canSeeCheckboxIsChecked($checkbox): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that the specified checkbox is unchecked.
     *
     * ```php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     */
    public function dontSeeCheckboxIsChecked($checkbox): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that the specified checkbox is unchecked.
     *
     * ```php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     */
    public function cantSeeCheckboxIsChecked($checkbox): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ```php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ```
     *
     * @param string|array $field
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function seeInField($field, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ```php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ```
     *
     * @param string|array $field
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function canSeeInField($field, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ```php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ```
     * @param string|array $field
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function dontSeeInField($field, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ```php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ```
     * @param string|array $field
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function cantSeeInField($field, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ```php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ```php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', string $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', string $form);
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     */
    public function seeInFormFields($formSelector, array $params): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInFormFields', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ```php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ```php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', string $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', string $form);
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     */
    public function canSeeInFormFields($formSelector, array $params): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInFormFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     */
    public function dontSeeInFormFields($formSelector, array $params): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInFormFields', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ```php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     */
    public function cantSeeInFormFields($formSelector, array $params): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInFormFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Submits the given form on the page, with the given form
     * values.  Pass the form field's values as an array in the second
     * parameter.
     *
     * Although this function can be used as a short-hand version of
     * `fillField()`, `selectOption()`, `click()` etc. it has some important
     * differences:
     *
     *  * Only field *names* may be used, not CSS/XPath selectors nor field labels
     *  * If a field is sent to this function that does *not* exist on the page,
     *    it will silently be added to the HTTP request.  This is helpful for testing
     *    some types of forms, but be aware that you will *not* get an exception
     *    like you would if you called `fillField()` or `selectOption()` with
     *    a missing field.
     *
     * Fields that are not provided will be filled by their values from the page,
     * or from any previous calls to `fillField()`, `selectOption()` etc.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify which button's value to include
     * in the request with the last parameter (as an alternative to
     * explicitly setting its value in the second parameter), as
     * button values are not otherwise included in the request.
     *
     * Examples:
     *
     * ```php
     * <?php
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ]);
     * // or
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ], 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * <form id="userForm">
     *     Login:
     *     <input type="text" name="user[login]" /><br/>
     *     Password:
     *     <input type="password" name="user[password]" /><br/>
     *     Do you agree to our terms?
     *     <input type="checkbox" name="user[agree]" /><br/>
     *     Subscribe to our newsletter?
     *     <input type="checkbox" name="user[newsletter]" value="1" checked="checked" /><br/>
     *     Select pricing plan:
     *     <select name="plan">
     *         <option value="1">Free</option>
     *         <option value="2" selected="selected">Paid</option>
     *     </select>
     *     <input type="submit" name="submitButton" value="Submit" />
     * </form>
     * ```
     *
     * You could write the following to submit it:
     *
     * ```php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ],
     *     'submitButton'
     * );
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is
     * the selected option.
     *
     * To uncheck the pre-checked checkbox "newsletter", call `$I->uncheckOption(['name' => 'user[newsletter]']);` *before*,
     * then submit the form as shown here (i.e. without the "newsletter" field in the `$params` array).
     *
     * You can also emulate a JavaScript submission by not specifying any
     * buttons in the third parameter to submitForm.
     *
     * ```php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ]
     * );
     * ```
     *
     * This function works well when paired with `seeInFormFields()`
     * for quickly testing CRUD interfaces and form validation logic.
     *
     * ```php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('#my-form', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('#my-form', $form);
     * ```
     *
     * Parameter values can be set to arrays for multiple input fields
     * of the same name, or multi-select combo boxes.  For checkboxes,
     * you can use either the string value or boolean `true`/`false` which will
     * be replaced by the checkbox's value in the DOM.
     *
     * ```php
     * <?php
     * $I->submitForm('#my-form', [
     *      'field1' => 'value',
     *      'checkbox' => [
     *          'value of first checkbox',
     *          'value of second checkbox',
     *      ],
     *      'otherCheckboxes' => [
     *          true,
     *          false,
     *          false
     *      ],
     *      'multiselect' => [
     *          'first option value',
     *          'second option value'
     *      ]
     * ]);
     * ```
     *
     * Mixing string and boolean values for a checkbox's value is not supported
     * and may produce unexpected results.
     *
     * Field names ending in `[]` must be passed without the trailing square
     * bracket characters, and must contain an array for its value.  This allows
     * submitting multiple values with the same name, consider:
     *
     * ```php
     * <?php
     * // This will NOT work correctly
     * $I->submitForm('#my-form', [
     *     'field[]' => 'value',
     *     'field[]' => 'another value',  // 'field[]' is already a defined key
     * ]);
     * ```
     *
     * The solution is to pass an array value:
     *
     * ```php
     * <?php
     * // This way both values are submitted
     * $I->submitForm('#my-form', [
     *     'field' => [
     *         'value',
     *         'another value',
     *     ]
     * ]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::submitForm()
     */
    public function submitForm($selector, array $params, ?string $button = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('submitForm', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fills a text field or textarea with the given string.
     *
     * ```php
     * <?php
     * $I->fillField("//input[@type='text']", "Hello World!");
     * $I->fillField(['name' => 'email'], 'jon@example.com');
     * ```
     * @see \Codeception\Lib\InnerBrowser::fillField()
     */
    public function fillField($field, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('fillField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects an option in a select tag or in radio button group.
     *
     * ```php
     * <?php
     * $I->selectOption('form select[name=account]', 'Premium');
     * $I->selectOption('form input[name=payment]', 'Monthly');
     * $I->selectOption('//form/select[@name=account]', 'Monthly');
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ```php
     * <?php
     * $I->selectOption('Which OS do you use?', ['Windows', 'Linux']);
     * ```
     *
     * Or provide an associative array for the second argument to specifically define which selection method should be used:
     *
     * ```php
     * <?php
     * $I->selectOption('Which OS do you use?', ['text' => 'Windows']); // Only search by text 'Windows'
     * $I->selectOption('Which OS do you use?', ['value' => 'windows']); // Only search by value 'windows'
     * ```
     * @see \Codeception\Lib\InnerBrowser::selectOption()
     */
    public function selectOption($select, $option): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('selectOption', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ```php
     * <?php
     * $I->checkOption('#agree');
     * ```
     * @see \Codeception\Lib\InnerBrowser::checkOption()
     */
    public function checkOption($option): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('checkOption', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unticks a checkbox.
     *
     * ```php
     * <?php
     * $I->uncheckOption('#notify');
     * ```
     * @see \Codeception\Lib\InnerBrowser::uncheckOption()
     */
    public function uncheckOption($option): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('uncheckOption', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Attaches a file relative to the Codeception `_data` directory to the given file upload field.
     *
     * ```php
     * <?php
     * // file is stored in 'tests/_data/prices.xls'
     * $I->attachFile('input[@type="file"]', 'prices.xls');
     * ```
     * @see \Codeception\Lib\InnerBrowser::attachFile()
     */
    public function attachFile($field, string $filename): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('attachFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax GET request with the passed parameters.
     * See `sendAjaxPostRequest()`
     * @see \Codeception\Lib\InnerBrowser::sendAjaxGetRequest()
     */
    public function sendAjaxGetRequest(string $uri, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxGetRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax POST request with the passed parameters.
     * The appropriate HTTP header is added automatically:
     * `X-Requested-With: XMLHttpRequest`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['task' => 'lorem ipsum']);
     * ```
     * Some frameworks (e.g. Symfony) create field names in the form of an "array":
     * `<input type="text" name="form[task]">`
     * In this case you need to pass the fields like this:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['form' => [
     *     'task' => 'lorem ipsum',
     *     'category' => 'miscellaneous',
     * ]]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::sendAjaxPostRequest()
     */
    public function sendAjaxPostRequest(string $uri, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxPostRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax request, using the passed HTTP method.
     * See `sendAjaxPostRequest()`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxRequest('PUT', '/posts/7', ['title' => 'new title']);
     * ```
     * @see \Codeception\Lib\InnerBrowser::sendAjaxRequest()
     */
    public function sendAjaxRequest(string $method, string $uri, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Use this method within an [interactive pause](https://codeception.com/docs/02-GettingStarted#Interactive-Pause) to save the HTML source code of the current page.
     *
     * ```php
     * <?php
     * $I->makeHtmlSnapshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.html
     * $I->makeHtmlSnapshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.html
     * ```
     * @see \Codeception\Lib\InnerBrowser::makeHtmlSnapshot()
     */
    public function makeHtmlSnapshot(?string $name = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('makeHtmlSnapshot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds and returns the text contents of the given element.
     * If a fuzzy locator is used, the element is found using CSS, XPath,
     * and by matching the full page source by regular expression.
     *
     * ```php
     * <?php
     * $heading = $I->grabTextFrom('h1');
     * $heading = $I->grabTextFrom('descendant-or-self::h1');
     * $value = $I->grabTextFrom('~<input value=(.*?)]~sgi'); // match with a regex
     * ```
     * @see \Codeception\Lib\InnerBrowser::grabTextFrom()
     */
    public function grabTextFrom($cssOrXPathOrRegex): mixed {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabTextFrom', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the value of the given attribute value from the given HTML element. For some attributes, the string `true` is returned instead of their literal value (e.g. `disabled="disabled"` or `required="required"`).
     * Fails if the element is not found. Returns `null` if the attribute is not present on the element.
     *
     * ```php
     * <?php
     * $I->grabAttributeFrom('#tooltip', 'title');
     * ```
     * @see \Codeception\Lib\InnerBrowser::grabAttributeFrom()
     */
    public function grabAttributeFrom($cssOrXpath, string $attribute): mixed {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabAttributeFrom', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs either the text content, or attribute values, of nodes
     * matched by $cssOrXpath and returns them as an array.
     *
     * ```html
     * <a href="#first">First</a>
     * <a href="#second">Second</a>
     * <a href="#third">Third</a>
     * ```
     *
     * ```php
     * <?php
     * // would return ['First', 'Second', 'Third']
     * $aLinkText = $I->grabMultiple('a');
     *
     * // would return ['#first', '#second', '#third']
     * $aLinks = $I->grabMultiple('a', 'href');
     * ```
     *
     * @return string[]
     * @see \Codeception\Lib\InnerBrowser::grabMultiple()
     */
    public function grabMultiple($cssOrXpath, ?string $attribute = NULL): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabMultiple', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds the value for the given form field.
     * If a fuzzy locator is used, the field is found by field name, CSS, and XPath.
     *
     * ```php
     * <?php
     * $name = $I->grabValueFrom('Name');
     * $name = $I->grabValueFrom('input[name=username]');
     * $name = $I->grabValueFrom('descendant-or-self::form/descendant::input[@name = 'username']');
     * $name = $I->grabValueFrom(['name' => 'username']);
     * ```
     * @see \Codeception\Lib\InnerBrowser::grabValueFrom()
     */
    public function grabValueFrom($field): mixed {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabValueFrom', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a cookie with the given name and value.
     * You can set additional cookie params like `domain`, `path`, `expires`, `secure` in array passed as last argument.
     *
     * ```php
     * <?php
     * $I->setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::setCookie()
     */
    public function setCookie($name, $val, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a cookie value.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     * If the cookie is set by an ajax request (XMLHttpRequest), there might be some delay caused by the browser, so try `$I->wait(0.1)`.
     * @see \Codeception\Lib\InnerBrowser::grabCookie()
     */
    public function grabCookie(string $cookie, array $params = []): mixed {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs current page source code.
     *
     * @throws \Codeception\Exception\ModuleException if no page was opened.
     * @return string Current page source code.
     * @see \Codeception\Lib\InnerBrowser::grabPageSource()
     */
    public function grabPageSource(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabPageSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ```php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     */
    public function seeCookie($cookie, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ```php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     */
    public function canSeeCookie($cookie, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     */
    public function dontSeeCookie($cookie, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     */
    public function cantSeeCookie($cookie, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::resetCookie()
     */
    public function resetCookie($cookie, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('resetCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     * Only works if `<html>` tag is present.
     *
     * ```php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     */
    public function seeElement($selector, array $attributes = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElement', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     * Only works if `<html>` tag is present.
     *
     * ```php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ```
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     */
    public function canSeeElement($selector, array $attributes = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ```php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     */
    public function dontSeeElement($selector, array $attributes = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeElement', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ```php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ```
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     */
    public function cantSeeElement($selector, array $attributes = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ```php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ```
     *
     * @param int|int[] $expected
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function seeNumberOfElements($selector, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberOfElements', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ```php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ```
     *
     * @param int|int[] $expected
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function canSeeNumberOfElements($selector, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElements', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is selected.
     *
     * ```php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     */
    public function seeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeOptionIsSelected', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is selected.
     *
     * ```php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     */
    public function canSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is not selected.
     *
     * ```php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     */
    public function dontSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeOptionIsSelected', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is not selected.
     *
     * ```php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     */
    public function cantSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that current page has 404 response status code.
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function seePageNotFound(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seePageNotFound', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that current page has 404 response status code.
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function canSeePageNotFound(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seePageNotFound', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks response code equals to provided value.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // preferred to use \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIs()
     */
    public function seeResponseCodeIs(int $code): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks response code equals to provided value.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // preferred to use \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIs()
     */
    public function canSeeResponseCodeIs(int $code): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     */
    public function seeResponseCodeIsBetween(int $from, int $to): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsBetween', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     */
    public function canSeeResponseCodeIsBetween(int $from, int $to): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsBetween', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is not equal to provided value.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // preferred to use \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseCodeIs()
     */
    public function dontSeeResponseCodeIs(int $code): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is not equal to provided value.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // preferred to use \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseCodeIs()
     */
    public function cantSeeResponseCodeIs(int $code): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseCodeIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 2xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsSuccessful()
     */
    public function seeResponseCodeIsSuccessful(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsSuccessful', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 2xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsSuccessful()
     */
    public function canSeeResponseCodeIsSuccessful(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsSuccessful', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code 3xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsRedirection()
     */
    public function seeResponseCodeIsRedirection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsRedirection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code 3xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsRedirection()
     */
    public function canSeeResponseCodeIsRedirection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsRedirection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 4xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsClientError()
     */
    public function seeResponseCodeIsClientError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsClientError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 4xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsClientError()
     */
    public function canSeeResponseCodeIsClientError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsClientError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 5xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsServerError()
     */
    public function seeResponseCodeIsServerError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsServerError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 5xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsServerError()
     */
    public function canSeeResponseCodeIsServerError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsServerError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     */
    public function seeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInTitle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ```
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     */
    public function canSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInTitle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title does not contain the given string.
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     */
    public function dontSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInTitle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title does not contain the given string.
     *
     * @return mixed|void
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     */
    public function cantSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInTitle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switch to iframe or frame on the page.
     *
     * Example:
     * ``` html
     * <iframe name="another_frame" src="http://example.com">
     * ```
     *
     * ``` php
     * <?php
     * # switch to iframe
     * $I->switchToIframe("another_frame");
     * ```
     * @see \Codeception\Lib\InnerBrowser::switchToIframe()
     */
    public function switchToIframe(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('switchToIframe', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Moves back in history.
     *
     * @param int $numberOfSteps (default value 1)
     * @see \Codeception\Lib\InnerBrowser::moveBack()
     */
    public function moveBack(int $numberOfSteps = 1): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('moveBack', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets SERVER parameters valid for all next requests.
     * this will remove old ones.
     *
     * ```php
     * $I->setServerParameters([]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::setServerParameters()
     */
    public function setServerParameters(array $params): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setServerParameters', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets SERVER parameter valid for all next requests.
     *
     * ```php
     * $I->haveServerParameter('name', 'value');
     * ```
     * @see \Codeception\Lib\InnerBrowser::haveServerParameter()
     */
    public function haveServerParameter(string $name, string $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveServerParameter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Prevents automatic redirects to be followed by the client
     *
     * ```php
     * <?php
     * $I->stopFollowingRedirects();
     * ```
     *
     * @part xml
     * @part json
     * @see \Codeception\Module\REST::stopFollowingRedirects()
     */
    public function stopFollowingRedirects(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('stopFollowingRedirects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enables automatic redirects to be followed by the client
     *
     * ```php
     * <?php
     * $I->startFollowingRedirects();
     * ```
     *
     * @part xml
     * @part json
     * @see \Codeception\Module\REST::startFollowingRedirects()
     */
    public function startFollowingRedirects(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('startFollowingRedirects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Follow pending redirect if there is one.
     *
     * ```php
     * <?php
     * $I->followRedirect();
     * ```
     * @see \Codeception\Lib\InnerBrowser::followRedirect()
     */
    public function followRedirect(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('followRedirect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets the maximum number of redirects that the Client can follow.
     *
     * ```php
     * <?php
     * $I->setMaxRedirects(2);
     * ```
     * @see \Codeception\Lib\InnerBrowser::setMaxRedirects()
     */
    public function setMaxRedirects(int $maxRedirects): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setMaxRedirects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given cookie in the test client is set to the expected value.
     *
     * ```php
     * <?php
     * $I->assertBrowserCookieValueSame('cookie_name', 'expected_value');
     * ```
     * @see \Codeception\Module\Symfony::assertBrowserCookieValueSame()
     */
    public function assertBrowserCookieValueSame(string $name, string $expectedValue, bool $raw = false, string $path = "\/", ?string $domain = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertBrowserCookieValueSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the test client has the specified cookie set.
     * This indicates that the cookie was set by any response during the test.
     *
     * ```
     * <?php
     * $I->assertBrowserHasCookie('cookie_name');
     * ```
     * @see \Codeception\Module\Symfony::assertBrowserHasCookie()
     */
    public function assertBrowserHasCookie(string $name, string $path = "\/", ?string $domain = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertBrowserHasCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the test client does not have the specified cookie set.
     * This indicates that the cookie was not set by any response during the test.
     *
     * ```php
     * <?php
     * $I->assertBrowserNotHasCookie('cookie_name');
     * ```
     * @see \Codeception\Module\Symfony::assertBrowserNotHasCookie()
     */
    public function assertBrowserNotHasCookie(string $name, string $path = "\/", ?string $domain = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertBrowserNotHasCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified request attribute matches the expected value.
     *
     * ```php
     * <?php
     * $I->assertRequestAttributeValueSame('attribute_name', 'expected_value');
     * ```
     * @see \Codeception\Module\Symfony::assertRequestAttributeValueSame()
     */
    public function assertRequestAttributeValueSame(string $name, string $expectedValue, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertRequestAttributeValueSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified response cookie is present and matches the expected value.
     *
     * ```php
     * <?php
     * $I->assertResponseCookieValueSame('cookie_name', 'expected_value');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseCookieValueSame()
     */
    public function assertResponseCookieValueSame(string $name, string $expectedValue, string $path = "\/", ?string $domain = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseCookieValueSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the response format matches the expected format. This checks the format returned by the `Response::getFormat()` method.
     *
     * ```php
     * <?php
     * $I->assertResponseFormatSame('json');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseFormatSame()
     */
    public function assertResponseFormatSame(?string $expectedFormat, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseFormatSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified cookie is present in the response. Optionally, it can check for a specific cookie path or domain.
     *
     * ```php
     * <?php
     * $I->assertResponseHasCookie('cookie_name');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseHasCookie()
     */
    public function assertResponseHasCookie(string $name, string $path = "\/", ?string $domain = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseHasCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified header is available in the response.
     * For example, use `assertResponseHasHeader('content-type');`.
     *
     * ```php
     * <?php
     * $I->assertResponseHasHeader('content-type');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseHasHeader()
     */
    public function assertResponseHasHeader(string $headerName, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseHasHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified header does not contain the expected value in the response.
     * For example, use `assertResponseHeaderNotSame('content-type', 'application/octet-stream');`.
     *
     * ```php
     * <?php
     * $I->assertResponseHeaderNotSame('content-type', 'application/json');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseHeaderNotSame()
     */
    public function assertResponseHeaderNotSame(string $headerName, string $expectedValue, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseHeaderNotSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified header contains the expected value in the response.
     * For example, use `assertResponseHeaderSame('content-type', 'application/octet-stream');`.
     *
     * ```php
     * <?php
     * $I->assertResponseHeaderSame('content-type', 'application/json');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseHeaderSame()
     */
    public function assertResponseHeaderSame(string $headerName, string $expectedValue, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseHeaderSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the response was successful (HTTP status code is in the 2xx range).
     *
     * ```php
     * <?php
     * $I->assertResponseIsSuccessful();
     * ```
     * @see \Codeception\Module\Symfony::assertResponseIsSuccessful()
     */
    public function assertResponseIsSuccessful(string $message = "", bool $verbose = true): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseIsSuccessful', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the response is unprocessable (HTTP status code is 422).
     *
     * ```php
     * <?php
     * $I->assertResponseIsUnprocessable();
     * ```
     * @see \Codeception\Module\Symfony::assertResponseIsUnprocessable()
     */
    public function assertResponseIsUnprocessable(string $message = "", bool $verbose = true): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseIsUnprocessable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified cookie is not present in the response. Optionally, it can check for a specific cookie path or domain.
     *
     * ```php
     * <?php
     * $I->assertResponseNotHasCookie('cookie_name');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseNotHasCookie()
     */
    public function assertResponseNotHasCookie(string $name, string $path = "\/", ?string $domain = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseNotHasCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the specified header is not available in the response.
     *
     * ```php
     * <?php
     * $I->assertResponseNotHasHeader('content-type');
     * ```
     * @see \Codeception\Module\Symfony::assertResponseNotHasHeader()
     */
    public function assertResponseNotHasHeader(string $headerName, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseNotHasHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the response is a redirect. Optionally, you can check the target location and status code.
     * The expected location can be either an absolute or a relative path.
     *
     * ```php
     * <?php
     * // Check that '/admin' redirects to '/login' with status code 302
     * $I->assertResponseRedirects('/login', 302);
     * ```
     * @see \Codeception\Module\Symfony::assertResponseRedirects()
     */
    public function assertResponseRedirects(?string $expectedLocation = NULL, ?int $expectedCode = NULL, string $message = "", bool $verbose = true): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseRedirects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the response status code matches the expected code.
     *
     * ```php
     * <?php
     * $I->assertResponseStatusCodeSame(200);
     * ```
     * @see \Codeception\Module\Symfony::assertResponseStatusCodeSame()
     */
    public function assertResponseStatusCodeSame(int $expectedCode, string $message = "", bool $verbose = true): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertResponseStatusCodeSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the request matches the given route and optionally route parameters.
     *
     * ```php
     * <?php
     * $I->assertRouteSame('profile', ['id' => 123]);
     * ```
     *
     * @param array<string, bool|float|int|null|string> $parameters
     * @see \Codeception\Module\Symfony::assertRouteSame()
     */
    public function assertRouteSame(string $expectedRoute, array $parameters = [], string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertRouteSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Reboots the client's kernel.
     * Can be used to manually reboot the kernel when 'rebootable_client' is set to false.
     *
     * ```php
     * <?php
     *
     * // Perform some requests
     *
     * $I->rebootClientKernel();
     *
     * // Perform other requests
     *
     * ```
     * @see \Codeception\Module\Symfony::rebootClientKernel()
     */
    public function rebootClientKernel(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('rebootClientKernel', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that a page is available.
     * By default, it checks the current page. Specify the `$url` parameter to change the page being checked.
     *
     * ```php
     * <?php
     * $I->amOnPage('/dashboard');
     * $I->seePageIsAvailable();
     *
     * $I->seePageIsAvailable('/dashboard'); // Same as above
     * ```
     *
     * @param string|null $url The URL of the page to check. If null, the current page is checked.
     * @see \Codeception\Module\Symfony::seePageIsAvailable()
     */
    public function seePageIsAvailable(?string $url = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seePageIsAvailable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that a page is available.
     * By default, it checks the current page. Specify the `$url` parameter to change the page being checked.
     *
     * ```php
     * <?php
     * $I->amOnPage('/dashboard');
     * $I->seePageIsAvailable();
     *
     * $I->seePageIsAvailable('/dashboard'); // Same as above
     * ```
     *
     * @param string|null $url The URL of the page to check. If null, the current page is checked.
     * @see \Codeception\Module\Symfony::seePageIsAvailable()
     */
    public function canSeePageIsAvailable(?string $url = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seePageIsAvailable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Navigates to a page and verifies that it redirects to another page.
     *
     * ```php
     * <?php
     * $I->seePageRedirectsTo('/admin', '/login');
     * ```
     * @see \Codeception\Module\Symfony::seePageRedirectsTo()
     */
    public function seePageRedirectsTo(string $page, string $redirectsTo): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seePageRedirectsTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Navigates to a page and verifies that it redirects to another page.
     *
     * ```php
     * <?php
     * $I->seePageRedirectsTo('/admin', '/login');
     * ```
     * @see \Codeception\Module\Symfony::seePageRedirectsTo()
     */
    public function canSeePageRedirectsTo(string $page, string $redirectsTo): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seePageRedirectsTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Submits a form by specifying the form name only once.
     *
     * Use this function instead of [`$I->submitForm()`](#submitForm) to avoid repeating the form name in the field selectors.
     * If you have customized the names of the field selectors, use `$I->submitForm()` for full control.
     *
     * ```php
     * <?php
     * $I->submitSymfonyForm('login_form', [
     *     '[email]'    => 'john_doe@example.com',
     *     '[password]' => 'secretForest'
     * ]);
     * ```
     *
     * @param string               $name   The `name` attribute of the `<form>`. You cannot use an array as a selector here.
     * @param array<string, mixed> $fields The form fields to submit.
     * @see \Codeception\Module\Symfony::submitSymfonyForm()
     */
    public function submitSymfonyForm(string $name, array $fields): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('submitSymfonyForm', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Run Symfony console command, grab response and return as string.
     * Recommended to use for integration or functional testing.
     *
     * ```php
     * <?php
     * $result = $I->runSymfonyConsoleCommand('hello:world', ['arg' => 'argValue', 'opt1' => 'optValue'], ['input']);
     * ```
     *
     * @param string                             $command          The console command to execute.
     * @param array<int|string, int|string|bool> $parameters       Arguments and options passed to the command
     * @param list<string>                       $consoleInputs    Inputs for interactive questions.
     * @param int                                $expectedExitCode Expected exit code.
     * @return string Console output (stdout).
     * @see \Codeception\Module\Symfony::runSymfonyConsoleCommand()
     */
    public function runSymfonyConsoleCommand(string $command, array $parameters = [], array $consoleInputs = [], int $expectedExitCode = 0): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('runSymfonyConsoleCommand', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the number of rows that match the given criteria for the
     * specified Doctrine entity.
     *
     * ```php
     * <?php
     * $I->grabNumRecords(User::class, ['status' => 'active']);
     * ```
     *
     * @param class-string<object> $entityClass Fully-qualified entity class name
     * @param array<string, mixed> $criteria    Optional query criteria
     * @see \Codeception\Module\Symfony::grabNumRecords()
     */
    public function grabNumRecords(string $entityClass, array $criteria = []): int {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabNumRecords', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Obtains the Doctrine entity repository {@see EntityRepository}
     * for a given entity, repository class or interface.
     *
     * ```php
     * <?php
     * $I->grabRepository($user);                          // entity object
     * $I->grabRepository(User::class);                    // entity class
     * $I->grabRepository(UserRepository::class);          // concrete repo
     * $I->grabRepository(UserRepositoryInterface::class); // interface
     * ```
     *
     * @param  object|class-string $mixed
     * @return EntityRepository<object>
     * @see \Codeception\Module\Symfony::grabRepository()
     */
    public function grabRepository(object|string $mixed): \Doctrine\ORM\EntityRepository {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a given number of records exists for the entity.
     * 'id' is the default search parameter.
     *
     * ```php
     * <?php
     * $I->seeNumRecords(1, User::class, ['name' => 'davert']);
     * $I->seeNumRecords(80, User::class);
     * ```
     *
     * @param int                  $expectedNum Expected count
     * @param class-string<object> $className   Entity class
     * @param array<string, mixed> $criteria    Optional criteria
     * @see \Codeception\Module\Symfony::seeNumRecords()
     */
    public function seeNumRecords(int $expectedNum, string $className, array $criteria = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumRecords', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that a given number of records exists for the entity.
     * 'id' is the default search parameter.
     *
     * ```php
     * <?php
     * $I->seeNumRecords(1, User::class, ['name' => 'davert']);
     * $I->seeNumRecords(80, User::class);
     * ```
     *
     * @param int                  $expectedNum Expected count
     * @param class-string<object> $className   Entity class
     * @param array<string, mixed> $criteria    Optional criteria
     * @see \Codeception\Module\Symfony::seeNumRecords()
     */
    public function canSeeNumRecords(int $expectedNum, string $className, array $criteria = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumRecords', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the checkbox with the given name is checked.
     *
     * ```php
     * <?php
     * $I->assertCheckboxChecked('agree_terms');
     * ```
     * @see \Codeception\Module\Symfony::assertCheckboxChecked()
     */
    public function assertCheckboxChecked(string $fieldName, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertCheckboxChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the checkbox with the given name is not checked.
     *
     * ```php
     * <?php
     * $I->assertCheckboxNotChecked('subscribe');
     * ```
     * @see \Codeception\Module\Symfony::assertCheckboxNotChecked()
     */
    public function assertCheckboxNotChecked(string $fieldName, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertCheckboxNotChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the value of the form input with the given name does not equal the expected value.
     *
     * ```php
     * <?php
     * $I->assertInputValueNotSame('username', 'admin');
     * ```
     * @see \Codeception\Module\Symfony::assertInputValueNotSame()
     */
    public function assertInputValueNotSame(string $fieldName, string $expectedValue, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertInputValueNotSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the value of the form input with the given name equals the expected value.
     *
     * ```php
     * <?php
     * $I->assertInputValueSame('username', 'johndoe');
     * ```
     * @see \Codeception\Module\Symfony::assertInputValueSame()
     */
    public function assertInputValueSame(string $fieldName, string $expectedValue, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertInputValueSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the `<title>` element contains the given title.
     *
     * ```php
     * <?php
     * $I->assertPageTitleContains('Welcome');
     * ```
     * @see \Codeception\Module\Symfony::assertPageTitleContains()
     */
    public function assertPageTitleContains(string $expectedTitle, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertPageTitleContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the `<title>` element equals the given title.
     *
     * ```php
     * <?php
     * $I->assertPageTitleSame('Home Page');
     * ```
     * @see \Codeception\Module\Symfony::assertPageTitleSame()
     */
    public function assertPageTitleSame(string $expectedTitle, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertPageTitleSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given selector matches at least one element in the response.
     *
     * ```php
     * <?php
     * $I->assertSelectorExists('.main-content');
     * ```
     * @see \Codeception\Module\Symfony::assertSelectorExists()
     */
    public function assertSelectorExists(string $selector, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertSelectorExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given selector does not match at least one element in the response.
     *
     * ```php
     * <?php
     * $I->assertSelectorNotExists('.error');
     * ```
     * @see \Codeception\Module\Symfony::assertSelectorNotExists()
     */
    public function assertSelectorNotExists(string $selector, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertSelectorNotExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the first element matching the given selector contains the expected text.
     *
     * ```php
     * <?php
     * $I->assertSelectorTextContains('h1', 'Dashboard');
     * ```
     * @see \Codeception\Module\Symfony::assertSelectorTextContains()
     */
    public function assertSelectorTextContains(string $selector, string $text, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertSelectorTextContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the first element matching the given selector does not contain the expected text.
     *
     * ```php
     * <?php
     * $I->assertSelectorTextNotContains('p', 'error');
     * ```
     * @see \Codeception\Module\Symfony::assertSelectorTextNotContains()
     */
    public function assertSelectorTextNotContains(string $selector, string $text, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertSelectorTextNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the text of the first element matching the given selector equals the expected text.
     *
     * ```php
     * <?php
     * $I->assertSelectorTextSame('h1', 'Dashboard');
     * ```
     * @see \Codeception\Module\Symfony::assertSelectorTextSame()
     */
    public function assertSelectorTextSame(string $selector, string $text, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertSelectorTextSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that **no** events (regular **or** orphan) were dispatched during the test.
     *
     * ```php
     * <?php
     * $I->dontSeeEvent();
     * $I->dontSeeEvent('App\MyEvent');
     * $I->dontSeeEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string>|null $expected Fully-qualified event class(es) that must **not** appear.
     * @see \Codeception\Module\Symfony::dontSeeEvent()
     */
    public function dontSeeEvent(array|string|null $expected = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeEvent', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that **no** events (regular **or** orphan) were dispatched during the test.
     *
     * ```php
     * <?php
     * $I->dontSeeEvent();
     * $I->dontSeeEvent('App\MyEvent');
     * $I->dontSeeEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string>|null $expected Fully-qualified event class(es) that must **not** appear.
     * @see \Codeception\Module\Symfony::dontSeeEvent()
     */
    public function cantSeeEvent(array|string|null $expected = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEvent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that one or more **listeners** were **not** called during the test.
     *
     * ```php
     * <?php
     * $I->dontSeeEventListenerIsCalled('App\MyEventListener');
     * $I->dontSeeEventListenerIsCalled(['App\MyEventListener', 'App\MyOtherEventListener']);
     * $I->dontSeeEventListenerIsCalled('App\MyEventListener', 'my.event');
     * $I->dontSeeEventListenerIsCalled('App\MyEventListener', ['my.event', 'my.other.event']);
     * ```
     *
     * @param class-string|object|list<class-string|object> $expected Listeners (class-strings or object instances).
     * @param string|list<string>                           $events   Event name(s) (empty = any).
     * @see \Codeception\Module\Symfony::dontSeeEventListenerIsCalled()
     */
    public function dontSeeEventListenerIsCalled(object|array|string $expected, array|string $events = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeEventListenerIsCalled', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that one or more **listeners** were **not** called during the test.
     *
     * ```php
     * <?php
     * $I->dontSeeEventListenerIsCalled('App\MyEventListener');
     * $I->dontSeeEventListenerIsCalled(['App\MyEventListener', 'App\MyOtherEventListener']);
     * $I->dontSeeEventListenerIsCalled('App\MyEventListener', 'my.event');
     * $I->dontSeeEventListenerIsCalled('App\MyEventListener', ['my.event', 'my.other.event']);
     * ```
     *
     * @param class-string|object|list<class-string|object> $expected Listeners (class-strings or object instances).
     * @param string|list<string>                           $events   Event name(s) (empty = any).
     * @see \Codeception\Module\Symfony::dontSeeEventListenerIsCalled()
     */
    public function cantSeeEventListenerIsCalled(object|array|string $expected, array|string $events = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEventListenerIsCalled', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that one or more event listeners were not called during the test.
     *
     * ```php
     * <?php
     * $I->dontSeeEventTriggered('App\MyEvent');
     * $I->dontSeeEventTriggered(new App\Events\MyEvent());
     * $I->dontSeeEventTriggered(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param      class-string|object|list<class-string|object> $expected
     * @deprecated Use {@see dontSeeEventListenerIsCalled()} instead.
     * @see \Codeception\Module\Symfony::dontSeeEventTriggered()
     */
    public function dontSeeEventTriggered(object|array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeEventTriggered', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that one or more event listeners were not called during the test.
     *
     * ```php
     * <?php
     * $I->dontSeeEventTriggered('App\MyEvent');
     * $I->dontSeeEventTriggered(new App\Events\MyEvent());
     * $I->dontSeeEventTriggered(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param      class-string|object|list<class-string|object> $expected
     * @deprecated Use {@see dontSeeEventListenerIsCalled()} instead.
     * @see \Codeception\Module\Symfony::dontSeeEventTriggered()
     */
    public function cantSeeEventTriggered(object|array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEventTriggered', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that there were no orphan events during the test.
     *
     * An orphan event is an event that was triggered by manually executing the
     * {@link https://symfony.com/doc/current/components/event_dispatcher.html#dispatch-the-event dispatch()}
     * method of the EventDispatcher but was not handled by any listener after it was dispatched.
     *
     * ```php
     * <?php
     * $I->dontSeeOrphanEvent();
     * $I->dontSeeOrphanEvent('App\MyEvent');
     * $I->dontSeeOrphanEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string>|null $expected Event class(es) that must **not** appear as orphan.
     * @see \Codeception\Module\Symfony::dontSeeOrphanEvent()
     */
    public function dontSeeOrphanEvent(array|string|null $expected = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeOrphanEvent', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that there were no orphan events during the test.
     *
     * An orphan event is an event that was triggered by manually executing the
     * {@link https://symfony.com/doc/current/components/event_dispatcher.html#dispatch-the-event dispatch()}
     * method of the EventDispatcher but was not handled by any listener after it was dispatched.
     *
     * ```php
     * <?php
     * $I->dontSeeOrphanEvent();
     * $I->dontSeeOrphanEvent('App\MyEvent');
     * $I->dontSeeOrphanEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string>|null $expected Event class(es) that must **not** appear as orphan.
     * @see \Codeception\Module\Symfony::dontSeeOrphanEvent()
     */
    public function cantSeeOrphanEvent(array|string|null $expected = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOrphanEvent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that at least one of the given events **was** dispatched (regular **or** orphan).
     *
     * ```php
     * <?php
     * $I->seeEvent('App\MyEvent');
     * $I->seeEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string> $expected Fully-qualified class-name(s) of the expected event(s).
     * @see \Codeception\Module\Symfony::seeEvent()
     */
    public function seeEvent(array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEvent', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that at least one of the given events **was** dispatched (regular **or** orphan).
     *
     * ```php
     * <?php
     * $I->seeEvent('App\MyEvent');
     * $I->seeEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string> $expected Fully-qualified class-name(s) of the expected event(s).
     * @see \Codeception\Module\Symfony::seeEvent()
     */
    public function canSeeEvent(array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEvent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that one or more **listeners** were called during the test.
     *
     * ```php
     * <?php
     * $I->seeEventListenerIsCalled('App\MyEventListener');
     * $I->seeEventListenerIsCalled(['App\MyEventListener', 'App\MyOtherEventListener']);
     * $I->seeEventListenerIsCalled('App\MyEventListener', 'my.event');
     * $I->seeEventListenerIsCalled('App\MyEventListener', ['my.event', 'my.other.event']);
     * ```
     *
     * @param class-string|object|list<class-string|object> $expected Listeners (class-strings or object instances).
     * @param string|list<string>                           $events   Event name(s) (empty = any).
     * @see \Codeception\Module\Symfony::seeEventListenerIsCalled()
     */
    public function seeEventListenerIsCalled(object|array|string $expected, array|string $events = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEventListenerIsCalled', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that one or more **listeners** were called during the test.
     *
     * ```php
     * <?php
     * $I->seeEventListenerIsCalled('App\MyEventListener');
     * $I->seeEventListenerIsCalled(['App\MyEventListener', 'App\MyOtherEventListener']);
     * $I->seeEventListenerIsCalled('App\MyEventListener', 'my.event');
     * $I->seeEventListenerIsCalled('App\MyEventListener', ['my.event', 'my.other.event']);
     * ```
     *
     * @param class-string|object|list<class-string|object> $expected Listeners (class-strings or object instances).
     * @param string|list<string>                           $events   Event name(s) (empty = any).
     * @see \Codeception\Module\Symfony::seeEventListenerIsCalled()
     */
    public function canSeeEventListenerIsCalled(object|array|string $expected, array|string $events = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEventListenerIsCalled', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that one or more event listeners were called during the test.
     *
     * ```php
     * <?php
     * $I->seeEventTriggered('App\MyEvent');
     * $I->seeEventTriggered(new App\Events\MyEvent());
     * $I->seeEventTriggered(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|object|list<class-string|object> $expected
     * @deprecated Use {@see seeEventListenerIsCalled()} instead.
     * @see \Codeception\Module\Symfony::seeEventTriggered()
     */
    public function seeEventTriggered(object|array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEventTriggered', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that one or more event listeners were called during the test.
     *
     * ```php
     * <?php
     * $I->seeEventTriggered('App\MyEvent');
     * $I->seeEventTriggered(new App\Events\MyEvent());
     * $I->seeEventTriggered(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|object|list<class-string|object> $expected
     * @deprecated Use {@see seeEventListenerIsCalled()} instead.
     * @see \Codeception\Module\Symfony::seeEventTriggered()
     */
    public function canSeeEventTriggered(object|array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEventTriggered', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that one or more orphan events **were** dispatched during the test.
     *
     * An orphan event is an event that was triggered by manually executing the
     * {@link https://symfony.com/doc/current/components/event_dispatcher.html#dispatch-the-event dispatch()}
     * method of the EventDispatcher but was not handled by any listener after it was dispatched.
     *
     * ```php
     * <?php
     * $I->seeOrphanEvent('App\MyEvent');
     * $I->seeOrphanEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string> $expected Event class-name(s) expected to be orphan.
     * @see \Codeception\Module\Symfony::seeOrphanEvent()
     */
    public function seeOrphanEvent(array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeOrphanEvent', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that one or more orphan events **were** dispatched during the test.
     *
     * An orphan event is an event that was triggered by manually executing the
     * {@link https://symfony.com/doc/current/components/event_dispatcher.html#dispatch-the-event dispatch()}
     * method of the EventDispatcher but was not handled by any listener after it was dispatched.
     *
     * ```php
     * <?php
     * $I->seeOrphanEvent('App\MyEvent');
     * $I->seeOrphanEvent(['App\MyEvent', 'App\MyOtherEvent']);
     * ```
     *
     * @param class-string|list<class-string> $expected Event class-name(s) expected to be orphan.
     * @see \Codeception\Module\Symfony::seeOrphanEvent()
     */
    public function canSeeOrphanEvent(array|string $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeOrphanEvent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that value of the field of the first form matching the given selector does equal the expected value.
     *
     * ```php
     * <?php
     * $I->assertFormValue('#loginForm', 'username', 'john_doe');
     * ```
     * @see \Codeception\Module\Symfony::assertFormValue()
     */
    public function assertFormValue(string $formSelector, string $fieldName, string $value, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertFormValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the field of the first form matching the given selector does not have a value.
     *
     * ```php
     * <?php
     * $I->assertNoFormValue('#registrationForm', 'middle_name');
     * ```
     * @see \Codeception\Module\Symfony::assertNoFormValue()
     */
    public function assertNoFormValue(string $formSelector, string $fieldName, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertNoFormValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that there are no errors bound to the submitted form.
     *
     * ```php
     * <?php
     * $I->dontSeeFormErrors();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeFormErrors()
     */
    public function dontSeeFormErrors(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeFormErrors', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that there are no errors bound to the submitted form.
     *
     * ```php
     * <?php
     * $I->dontSeeFormErrors();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeFormErrors()
     */
    public function cantSeeFormErrors(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeFormErrors', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that a form field has an error.
     * You can specify the expected error message as second parameter.
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessage('username');
     * $I->seeFormErrorMessage('username', 'Username is empty');
     * ```
     * @see \Codeception\Module\Symfony::seeFormErrorMessage()
     */
    public function seeFormErrorMessage(string $field, ?string $message = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFormErrorMessage', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that a form field has an error.
     * You can specify the expected error message as second parameter.
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessage('username');
     * $I->seeFormErrorMessage('username', 'Username is empty');
     * ```
     * @see \Codeception\Module\Symfony::seeFormErrorMessage()
     */
    public function canSeeFormErrorMessage(string $field, ?string $message = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFormErrorMessage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that multiple fields on a form have errors.
     *
     * If you only specify the name of the fields, this method will
     * verify that the field contains at least one error of any type:
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessages(['telephone', 'address']);
     * ```
     *
     * If you want to specify the error messages, you can do so
     * by sending an associative array instead, with the key being
     * the name of the field and the error message the value.
     * This method will validate that the expected error message
     * is contained in the actual error message, that is,
     * you can specify either the entire error message or just a part of it:
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessages([
     *     'address'   => 'The address is too long',
     *     'telephone' => 'too short', // the full error message is 'The telephone is too short'
     * ]);
     * ```
     *
     * If you don't want to specify the error message for some fields,
     * you can pass `null` as value instead of the message string,
     * or you can directly omit the value of that field. If that is the case,
     * it will be validated that that field has at least one error of any type:
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessages([
     *     'telephone' => 'too short',
     *     'address'   => null,
     *     'postal code',
     * ]);
     * ```
     *
     * @param array<int|string, string|null> $expectedErrors
     * @see \Codeception\Module\Symfony::seeFormErrorMessages()
     */
    public function seeFormErrorMessages(array $expectedErrors): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFormErrorMessages', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that multiple fields on a form have errors.
     *
     * If you only specify the name of the fields, this method will
     * verify that the field contains at least one error of any type:
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessages(['telephone', 'address']);
     * ```
     *
     * If you want to specify the error messages, you can do so
     * by sending an associative array instead, with the key being
     * the name of the field and the error message the value.
     * This method will validate that the expected error message
     * is contained in the actual error message, that is,
     * you can specify either the entire error message or just a part of it:
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessages([
     *     'address'   => 'The address is too long',
     *     'telephone' => 'too short', // the full error message is 'The telephone is too short'
     * ]);
     * ```
     *
     * If you don't want to specify the error message for some fields,
     * you can pass `null` as value instead of the message string,
     * or you can directly omit the value of that field. If that is the case,
     * it will be validated that that field has at least one error of any type:
     *
     * ```php
     * <?php
     * $I->seeFormErrorMessages([
     *     'telephone' => 'too short',
     *     'address'   => null,
     *     'postal code',
     * ]);
     * ```
     *
     * @param array<int|string, string|null> $expectedErrors
     * @see \Codeception\Module\Symfony::seeFormErrorMessages()
     */
    public function canSeeFormErrorMessages(array $expectedErrors): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFormErrorMessages', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that there are one or more errors bound to the submitted form.
     *
     * ```php
     * <?php
     * $I->seeFormHasErrors();
     * ```
     * @see \Codeception\Module\Symfony::seeFormHasErrors()
     */
    public function seeFormHasErrors(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFormHasErrors', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that there are one or more errors bound to the submitted form.
     *
     * ```php
     * <?php
     * $I->seeFormHasErrors();
     * ```
     * @see \Codeception\Module\Symfony::seeFormHasErrors()
     */
    public function canSeeFormHasErrors(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFormHasErrors', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given URL has been called using, if specified, the given method, body and/or headers.
     * By default, it will inspect the default Symfony HttpClient; you may check a different one by passing its
     * service-id in $httpClientId.
     * It succeeds even if the request was executed multiple times.
     *
     * ```php
     * <?php
     * $I->assertHttpClientRequest(
     *     'https://example.com/api',
     *     'POST',
     *     '{"data": "value"}',
     *     ['Authorization' => 'Bearer token']
     * );
     * ```
     *
     * @param string|array<mixed>|null      $expectedBody
     * @param array<string,string|string[]> $expectedHeaders
     * @see \Codeception\Module\Symfony::assertHttpClientRequest()
     */
    public function assertHttpClientRequest(string $expectedUrl, string $expectedMethod = "GET", array|string|null $expectedBody = NULL, array $expectedHeaders = [], string $httpClientId = "http_client"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertHttpClientRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that exactly $count requests have been executed by the given HttpClient.
     * By default, it will inspect the default Symfony HttpClient; you may check a different one by passing its
     * service-id in $httpClientId.
     *
     * ```php
     * $I->assertHttpClientRequestCount(3);
     * ```
     * @see \Codeception\Module\Symfony::assertHttpClientRequestCount()
     */
    public function assertHttpClientRequestCount(int $count, string $httpClientId = "http_client"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertHttpClientRequestCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given URL *has not* been requested with the supplied HTTP method.
     * By default, it will inspect the default Symfony HttpClient; you may check a different one by passing its
     * service-id in $httpClientId.
     * ```php
     * $I->assertNotHttpClientRequest('https://example.com/unexpected', 'GET');
     * ```
     * @see \Codeception\Module\Symfony::assertNotHttpClientRequest()
     */
    public function assertNotHttpClientRequest(string $unexpectedUrl, string $unexpectedMethod = "GET", string $httpClientId = "http_client"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotHttpClientRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that there are no deprecation messages in Symfony's log.
     *
     * ```php
     * <?php
     * $I->amOnPage('/home');
     * $I->dontSeeDeprecations();
     * ```
     *
     * @param string $message Optional custom failure message.
     * @see \Codeception\Module\Symfony::dontSeeDeprecations()
     */
    public function dontSeeDeprecations(string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeDeprecations', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that there are no deprecation messages in Symfony's log.
     *
     * ```php
     * <?php
     * $I->amOnPage('/home');
     * $I->dontSeeDeprecations();
     * ```
     *
     * @param string $message Optional custom failure message.
     * @see \Codeception\Module\Symfony::dontSeeDeprecations()
     */
    public function cantSeeDeprecations(string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeDeprecations', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the expected number of emails was sent.
     *
     * ```php
     * <?php
     * $I->assertEmailCount(2, 'smtp');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailCount()
     */
    public function assertEmailCount(int $count, ?string $transport = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given mailer event is not queued.
     * Use `getMailerEvent(int $index = 0, ?string $transport = null)` to retrieve a mailer event by index.
     *
     * ```php
     * <?php
     * $event = $I->getMailerEvent();
     * $I->assertEmailIsNotQueued($event);
     * ```
     * @see \Codeception\Module\Symfony::assertEmailIsNotQueued()
     */
    public function assertEmailIsNotQueued(\Symfony\Component\Mailer\Event\MessageEvent $event, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailIsNotQueued', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given mailer event is queued.
     * Use `getMailerEvent(int $index = 0, ?string $transport = null)` to retrieve a mailer event by index.
     *
     * ```php
     * <?php
     * $event = $I->getMailerEvent();
     * $I->assertEmailIsQueued($event);
     * ```
     * @see \Codeception\Module\Symfony::assertEmailIsQueued()
     */
    public function assertEmailIsQueued(\Symfony\Component\Mailer\Event\MessageEvent $event, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailIsQueued', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the expected number of emails was queued (e.g. using the Messenger component).
     *
     * ```php
     * <?php
     * $I->assertQueuedEmailCount(1, 'smtp');
     * ```
     * @see \Codeception\Module\Symfony::assertQueuedEmailCount()
     */
    public function assertQueuedEmailCount(int $count, ?string $transport = NULL, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertQueuedEmailCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that no email was sent.
     * The check is based on `\Symfony\Component\Mailer\EventListener\MessageLoggerListener`, which means:
     * If your app performs an HTTP redirect, you need to suppress it using [stopFollowingRedirects()](#stopFollowingRedirects) first; otherwise this check will *always* pass.
     *
     * ```php
     * <?php
     * $I->dontSeeEmailIsSent();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeEmailIsSent()
     */
    public function dontSeeEmailIsSent(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeEmailIsSent', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that no email was sent.
     * The check is based on `\Symfony\Component\Mailer\EventListener\MessageLoggerListener`, which means:
     * If your app performs an HTTP redirect, you need to suppress it using [stopFollowingRedirects()](#stopFollowingRedirects) first; otherwise this check will *always* pass.
     *
     * ```php
     * <?php
     * $I->dontSeeEmailIsSent();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeEmailIsSent()
     */
    public function cantSeeEmailIsSent(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEmailIsSent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the last sent email.
     * The function is based on `\Symfony\Component\Mailer\EventListener\MessageLoggerListener`, which means:
     * If your app performs an HTTP redirect after sending the email, you need to suppress it using [stopFollowingRedirects()](#stopFollowingRedirects) first.
     * See also: [grabSentEmails()](https://codeception.com/docs/modules/Symfony#grabSentEmails)
     *
     * ```php
     * <?php
     * $email = $I->grabLastSentEmail();
     * $address = $email->getTo()[0];
     * $I->assertSame('john_doe@example.com', $address->getAddress());
     * ```
     * @see \Codeception\Module\Symfony::grabLastSentEmail()
     */
    public function grabLastSentEmail(): ?\Symfony\Component\Mime\Email {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabLastSentEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns an array of all sent emails.
     * The function is based on `\Symfony\Component\Mailer\EventListener\MessageLoggerListener`, which means:
     * If your app performs an HTTP redirect after sending the email, you need to suppress it using [stopFollowingRedirects()](#stopFollowingRedirects) first.
     * See also: [grabLastSentEmail()](https://codeception.com/docs/modules/Symfony#grabLastSentEmail)
     *
     * ```php
     * <?php
     * $emails = $I->grabSentEmails();
     * ```
     *
     * @return \Symfony\Component\Mime\RawMessage[]
     * @see \Codeception\Module\Symfony::grabSentEmails()
     */
    public function grabSentEmails(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabSentEmails', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the given number of emails was sent (default `$expectedCount`: 1).
     * The check is based on `\Symfony\Component\Mailer\EventListener\MessageLoggerListener`, which means:
     * If your app performs an HTTP redirect after sending the email, you need to suppress it using [stopFollowingRedirects()](#stopFollowingRedirects) first.
     *
     * Limitation:
     * If your mail is sent in a Symfony console command and you start that command in your test with [$I->runShellCommand()](https://codeception.com/docs/modules/Cli#runShellCommand),
     * Codeception will not notice it.
     * As a more professional alternative, we recommend Mailpit (see [Addons](https://codeception.com/addons)), which also lets you test the content of the mail.
     *
     * ```php
     * <?php
     * $I->seeEmailIsSent(2);
     * ```
     *
     * @param int $expectedCount The expected number of emails sent
     * @see \Codeception\Module\Symfony::seeEmailIsSent()
     */
    public function seeEmailIsSent(int $expectedCount = 1): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeEmailIsSent', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the given number of emails was sent (default `$expectedCount`: 1).
     * The check is based on `\Symfony\Component\Mailer\EventListener\MessageLoggerListener`, which means:
     * If your app performs an HTTP redirect after sending the email, you need to suppress it using [stopFollowingRedirects()](#stopFollowingRedirects) first.
     *
     * Limitation:
     * If your mail is sent in a Symfony console command and you start that command in your test with [$I->runShellCommand()](https://codeception.com/docs/modules/Cli#runShellCommand),
     * Codeception will not notice it.
     * As a more professional alternative, we recommend Mailpit (see [Addons](https://codeception.com/addons)), which also lets you test the content of the mail.
     *
     * ```php
     * <?php
     * $I->seeEmailIsSent(2);
     * ```
     *
     * @param int $expectedCount The expected number of emails sent
     * @see \Codeception\Module\Symfony::seeEmailIsSent()
     */
    public function canSeeEmailIsSent(int $expectedCount = 1): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeEmailIsSent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the mailer event at the specified index.
     *
     * ```php
     * <?php
     * $event = $I->getMailerEvent();
     * ```
     * @see \Codeception\Module\Symfony::getMailerEvent()
     */
    public function getMailerEvent(int $index = 0, ?string $transport = NULL): ?\Symfony\Component\Mailer\Event\MessageEvent {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getMailerEvent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that an email contains addresses with a [header](https://datatracker.ietf.org/doc/html/rfc4021)
     * `$headerName` and its expected value `$expectedValue`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailAddressContains('To', 'jane_doe@example.com');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailAddressContains()
     */
    public function assertEmailAddressContains(string $headerName, string $expectedValue, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailAddressContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that an email has sent the specified number `$count` of attachments.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailAttachmentCount(1);
     * ```
     * @see \Codeception\Module\Symfony::assertEmailAttachmentCount()
     */
    public function assertEmailAttachmentCount(int $count, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailAttachmentCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that an email has a [header](https://datatracker.ietf.org/doc/html/rfc4021) `$headerName`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailHasHeader('Bcc');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailHasHeader()
     */
    public function assertEmailHasHeader(string $headerName, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailHasHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that the [header](https://datatracker.ietf.org/doc/html/rfc4021)
     * `$headerName` of an email is not the expected one `$expectedValue`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailHeaderNotSame('To', 'john_doe@gmail.com');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailHeaderNotSame()
     */
    public function assertEmailHeaderNotSame(string $headerName, string $expectedValue, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailHeaderNotSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that the [header](https://datatracker.ietf.org/doc/html/rfc4021)
     * `$headerName` of an email is the same as expected `$expectedValue`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailHeaderSame('To', 'jane_doe@gmail.com');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailHeaderSame()
     */
    public function assertEmailHeaderSame(string $headerName, string $expectedValue, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailHeaderSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that the HTML body of an email contains `$text`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailHtmlBodyContains('Successful registration');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailHtmlBodyContains()
     */
    public function assertEmailHtmlBodyContains(string $text, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailHtmlBodyContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that the HTML body of an email does not contain a text `$text`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailHtmlBodyNotContains('userpassword');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailHtmlBodyNotContains()
     */
    public function assertEmailHtmlBodyNotContains(string $text, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailHtmlBodyNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that an email does not have a [header](https://datatracker.ietf.org/doc/html/rfc4021) `$headerName`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailNotHasHeader('Bcc');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailNotHasHeader()
     */
    public function assertEmailNotHasHeader(string $headerName, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailNotHasHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify the text body of an email contains a `$text`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailTextBodyContains('Example text body');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailTextBodyContains()
     */
    public function assertEmailTextBodyContains(string $text, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailTextBodyContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verify that the text body of an email does not contain a `$text`.
     * If the Email object is not specified, the last email sent is used instead.
     *
     * ```php
     * <?php
     * $I->assertEmailTextBodyNotContains('My secret text body');
     * ```
     * @see \Codeception\Module\Symfony::assertEmailTextBodyNotContains()
     */
    public function assertEmailTextBodyNotContains(string $text, ?\Symfony\Component\Mime\Email $email = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmailTextBodyNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a Symfony parameter
     *
     * ```php
     * <?php
     * $I->grabParameter('app.business_name');
     * ```
     * This only works for explicitly set parameters (just using `bind` for Symfony's dependency injection is not enough).
     *
     * @return array<array-key, mixed>|bool|string|int|float|UnitEnum|null
     * @see \Codeception\Module\Symfony::grabParameter()
     */
    public function grabParameter(string $parameterName): \UnitEnum|array|string|int|float|bool|null {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabParameter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens web page by action name
     *
     * ```php
     * <?php
     * $I->amOnAction('PostController::index');
     * $I->amOnAction('HomeController');
     * $I->amOnAction('ArticleController', ['slug' => 'lorem-ipsum']);
     * ```
     *
     * @param array<string, mixed> $params
     * @see \Codeception\Module\Symfony::amOnAction()
     */
    public function amOnAction(string $action, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens web page using route name and parameters.
     *
     * ```php
     * <?php
     * $I->amOnRoute('posts.create');
     * $I->amOnRoute('posts.show', ['id' => 34]);
     * ```
     *
     * @param array<string, mixed> $params
     * @see \Codeception\Module\Symfony::amOnRoute()
     */
    public function amOnRoute(string $routeName, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnRoute', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Invalidate previously cached routes.
     * @see \Codeception\Module\Symfony::invalidateCachedRouter()
     */
    public function invalidateCachedRouter(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('invalidateCachedRouter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current page matches action
     *
     * ```php
     * <?php
     * $I->seeCurrentActionIs('PostController::index');
     * $I->seeCurrentActionIs('HomeController');
     * ```
     * @see \Codeception\Module\Symfony::seeCurrentActionIs()
     */
    public function seeCurrentActionIs(string $action): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentActionIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current page matches action
     *
     * ```php
     * <?php
     * $I->seeCurrentActionIs('PostController::index');
     * $I->seeCurrentActionIs('HomeController');
     * ```
     * @see \Codeception\Module\Symfony::seeCurrentActionIs()
     */
    public function canSeeCurrentActionIs(string $action): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentActionIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url matches route.
     *
     * ```php
     * <?php
     * $I->seeCurrentRouteIs('posts.index');
     * $I->seeCurrentRouteIs('posts.show', ['id' => 8]);
     * ```
     *
     * @param array<string, mixed> $params
     * @see \Codeception\Module\Symfony::seeCurrentRouteIs()
     */
    public function seeCurrentRouteIs(string $routeName, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentRouteIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current url matches route.
     *
     * ```php
     * <?php
     * $I->seeCurrentRouteIs('posts.index');
     * $I->seeCurrentRouteIs('posts.show', ['id' => 8]);
     * ```
     *
     * @param array<string, mixed> $params
     * @see \Codeception\Module\Symfony::seeCurrentRouteIs()
     */
    public function canSeeCurrentRouteIs(string $routeName, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentRouteIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url matches route.
     * Unlike seeCurrentRouteIs, this can match without exact route parameters
     *
     * ```php
     * <?php
     * $I->seeInCurrentRoute('my_blog_pages');
     * ```
     * @see \Codeception\Module\Symfony::seeInCurrentRoute()
     */
    public function seeInCurrentRoute(string $routeName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInCurrentRoute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current url matches route.
     * Unlike seeCurrentRouteIs, this can match without exact route parameters
     *
     * ```php
     * <?php
     * $I->seeInCurrentRoute('my_blog_pages');
     * ```
     * @see \Codeception\Module\Symfony::seeInCurrentRoute()
     */
    public function canSeeInCurrentRoute(string $routeName): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInCurrentRoute', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that user is not authenticated.
     *
     * ```php
     * <?php
     * $I->dontSeeAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeAuthentication()
     */
    public function dontSeeAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeAuthentication', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that user is not authenticated.
     *
     * ```php
     * <?php
     * $I->dontSeeAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeAuthentication()
     */
    public function cantSeeAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeAuthentication', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that user is not authenticated with the 'remember me' option.
     *
     * ```php
     * <?php
     * $I->dontSeeRememberedAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeRememberedAuthentication()
     */
    public function dontSeeRememberedAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeRememberedAuthentication', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that user is not authenticated with the 'remember me' option.
     *
     * ```php
     * <?php
     * $I->dontSeeRememberedAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeRememberedAuthentication()
     */
    public function cantSeeRememberedAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeRememberedAuthentication', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a user is authenticated.
     *
     * ```php
     * <?php
     * $I->seeAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::seeAuthentication()
     */
    public function seeAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeAuthentication', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a user is authenticated.
     *
     * ```php
     * <?php
     * $I->seeAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::seeAuthentication()
     */
    public function canSeeAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeAuthentication', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a user is authenticated with the 'remember me' option.
     *
     * ```php
     * <?php
     * $I->seeRememberedAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::seeRememberedAuthentication()
     */
    public function seeRememberedAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeRememberedAuthentication', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a user is authenticated with the 'remember me' option.
     *
     * ```php
     * <?php
     * $I->seeRememberedAuthentication();
     * ```
     * @see \Codeception\Module\Symfony::seeRememberedAuthentication()
     */
    public function canSeeRememberedAuthentication(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeRememberedAuthentication', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that the current user has a role
     *
     * ```php
     * <?php
     * $I->seeUserHasRole('ROLE_ADMIN');
     * ```
     * @see \Codeception\Module\Symfony::seeUserHasRole()
     */
    public function seeUserHasRole(string $role): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeUserHasRole', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that the current user has a role
     *
     * ```php
     * <?php
     * $I->seeUserHasRole('ROLE_ADMIN');
     * ```
     * @see \Codeception\Module\Symfony::seeUserHasRole()
     */
    public function canSeeUserHasRole(string $role): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeUserHasRole', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that the current user has multiple roles
     *
     * ```php
     * <?php
     * $I->seeUserHasRoles(['ROLE_USER', 'ROLE_ADMIN']);
     * ```
     *
     * @param string[] $roles
     * @see \Codeception\Module\Symfony::seeUserHasRoles()
     */
    public function seeUserHasRoles(array $roles): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeUserHasRoles', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Verifies that the current user has multiple roles
     *
     * ```php
     * <?php
     * $I->seeUserHasRoles(['ROLE_USER', 'ROLE_ADMIN']);
     * ```
     *
     * @param string[] $roles
     * @see \Codeception\Module\Symfony::seeUserHasRoles()
     */
    public function canSeeUserHasRoles(array $roles): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeUserHasRoles', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the user's password would not benefit from rehashing.
     * If the user is not provided, it is taken from the current session.
     *
     * You might use this function after performing tasks like registering a user or submitting a password update form.
     *
     * ```php
     * <?php
     * $I->seeUserPasswordDoesNotNeedRehash();
     * $I->seeUserPasswordDoesNotNeedRehash($user);
     * ```
     *
     * @param UserInterface|null $user
     * @see \Codeception\Module\Symfony::seeUserPasswordDoesNotNeedRehash()
     */
    public function seeUserPasswordDoesNotNeedRehash(?\Symfony\Component\Security\Core\User\UserInterface $user = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeUserPasswordDoesNotNeedRehash', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the user's password would not benefit from rehashing.
     * If the user is not provided, it is taken from the current session.
     *
     * You might use this function after performing tasks like registering a user or submitting a password update form.
     *
     * ```php
     * <?php
     * $I->seeUserPasswordDoesNotNeedRehash();
     * $I->seeUserPasswordDoesNotNeedRehash($user);
     * ```
     *
     * @param UserInterface|null $user
     * @see \Codeception\Module\Symfony::seeUserPasswordDoesNotNeedRehash()
     */
    public function canSeeUserPasswordDoesNotNeedRehash(?\Symfony\Component\Security\Core\User\UserInterface $user = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeUserPasswordDoesNotNeedRehash', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a service from the Symfony dependency injection container (DIC).
     * In the "test" environment, Symfony uses a special `test.service_container`.
     * See the "[Public Versus Private Services](https://symfony.com/doc/current/service_container/alias_private.html#marking-services-as-public-private)" documentation.
     * Services that aren't injected anywhere in your app, need to be defined as `public` to be accessible by Codeception.
     *
     * ```php
     * <?php
     * $em = $I->grabService('doctrine');
     * ```
     *
     * @part services
     * @param non-empty-string $serviceId
     * @see \Codeception\Module\Symfony::grabService()
     */
    public function grabService(string $serviceId): object {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get service $serviceName and add it to the lists of persistent services.
     *
     * @part services
     * @param non-empty-string $serviceName
     * @see \Codeception\Module\Symfony::persistService()
     */
    public function persistService(string $serviceName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('persistService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get service $serviceName and add it to the lists of persistent services,
     * making that service persistent between tests.
     *
     * @part services
     * @param non-empty-string $serviceName
     * @see \Codeception\Module\Symfony::persistPermanentService()
     */
    public function persistPermanentService(string $serviceName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('persistPermanentService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Remove service $serviceName from the lists of persistent services.
     *
     * @part services
     * @see \Codeception\Module\Symfony::unpersistService()
     */
    public function unpersistService(string $serviceName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('unpersistService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Login with the given user object.
     * The `$user` object must have a persistent identifier.
     * If you have more than one firewall or firewall context, you can specify the desired one as a parameter.
     *
     * ```php
     * <?php
     * $user = $I->grabEntityFromRepository(User::class, [
     *     'email' => 'john_doe@example.com'
     * ]);
     * $I->amLoggedInAs($user);
     * ```
     * @see \Codeception\Module\Symfony::amLoggedInAs()
     */
    public function amLoggedInAs(\Symfony\Component\Security\Core\User\UserInterface $user, string $firewallName = "main", ?string $firewallContext = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amLoggedInAs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Symfony::amLoggedInWithToken()
     */
    public function amLoggedInWithToken(\Symfony\Component\Security\Core\Authentication\Token\TokenInterface $token, string $firewallName = "main", ?string $firewallContext = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amLoggedInWithToken', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that a session attribute does not exist, or is not equal to the passed value.
     *
     * ```php
     * <?php
     * $I->dontSeeInSession('attribute');
     * $I->dontSeeInSession('attribute', 'value');
     * ```
     * @see \Codeception\Module\Symfony::dontSeeInSession()
     */
    public function dontSeeInSession(string $attribute, mixed $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInSession', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Assert that a session attribute does not exist, or is not equal to the passed value.
     *
     * ```php
     * <?php
     * $I->dontSeeInSession('attribute');
     * $I->dontSeeInSession('attribute', 'value');
     * ```
     * @see \Codeception\Module\Symfony::dontSeeInSession()
     */
    public function cantSeeInSession(string $attribute, mixed $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInSession', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Go to the configured logout url (by default: `/logout`).
     * This method includes redirection to the destination page configured after logout.
     *
     * See the Symfony documentation on ['Logging Out'](https://symfony.com/doc/current/security.html#logging-out).
     * @see \Codeception\Module\Symfony::goToLogoutPath()
     */
    public function goToLogoutPath(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('goToLogoutPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Alias method for [`logoutProgrammatically()`](https://codeception.com/docs/modules/Symfony#logoutProgrammatically)
     *
     * ```php
     * <?php
     * $I->logout();
     * ```
     * @see \Codeception\Module\Symfony::logout()
     */
    public function logout(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('logout', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Invalidates the current user's session and expires the session cookies.
     * This method does not include any redirects after logging out.
     *
     * ```php
     * <?php
     * $I->logoutProgrammatically();
     * ```
     * @see \Codeception\Module\Symfony::logoutProgrammatically()
     */
    public function logoutProgrammatically(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('logoutProgrammatically', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that a session attribute exists.
     *
     * ```php
     * <?php
     * $I->seeInSession('attribute');
     * $I->seeInSession('attribute', 'value');
     * ```
     * @see \Codeception\Module\Symfony::seeInSession()
     */
    public function seeInSession(string $attribute, mixed $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInSession', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Assert that a session attribute exists.
     *
     * ```php
     * <?php
     * $I->seeInSession('attribute');
     * $I->seeInSession('attribute', 'value');
     * ```
     * @see \Codeception\Module\Symfony::seeInSession()
     */
    public function canSeeInSession(string $attribute, mixed $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInSession', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the session has a given list of values.
     *
     * ```php
     * <?php
     * $I->seeSessionHasValues(['key1', 'key2']);
     * $I->seeSessionHasValues(['key1' => 'value1', 'key2' => 'value2']);
     * ```
     *
     * @param array<int|string, mixed> $bindings
     * @see \Codeception\Module\Symfony::seeSessionHasValues()
     */
    public function seeSessionHasValues(array $bindings): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeSessionHasValues', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Assert that the session has a given list of values.
     *
     * ```php
     * <?php
     * $I->seeSessionHasValues(['key1', 'key2']);
     * $I->seeSessionHasValues(['key1' => 'value1', 'key2' => 'value2']);
     * ```
     *
     * @param array<int|string, mixed> $bindings
     * @see \Codeception\Module\Symfony::seeSessionHasValues()
     */
    public function canSeeSessionHasValues(array $bindings): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeSessionHasValues', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no fallback translations were found.
     *
     * ```php
     * <?php
     * $I->dontSeeFallbackTranslations();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeFallbackTranslations()
     */
    public function dontSeeFallbackTranslations(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeFallbackTranslations', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that no fallback translations were found.
     *
     * ```php
     * <?php
     * $I->dontSeeFallbackTranslations();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeFallbackTranslations()
     */
    public function cantSeeFallbackTranslations(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeFallbackTranslations', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that no missing translations were found.
     *
     * ```php
     * <?php
     * $I->dontSeeMissingTranslations();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeMissingTranslations()
     */
    public function dontSeeMissingTranslations(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeMissingTranslations', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that no missing translations were found.
     *
     * ```php
     * <?php
     * $I->dontSeeMissingTranslations();
     * ```
     * @see \Codeception\Module\Symfony::dontSeeMissingTranslations()
     */
    public function cantSeeMissingTranslations(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeMissingTranslations', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs the count of defined translations.
     *
     * ```php
     * <?php
     * $count = $I->grabDefinedTranslations();
     * ```
     *
     * @return int The count of defined translations.
     * @see \Codeception\Module\Symfony::grabDefinedTranslationsCount()
     */
    public function grabDefinedTranslationsCount(): int {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabDefinedTranslationsCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that there are no missing translations and no fallback translations.
     *
     * ```php
     * <?php
     * $I->seeAllTranslationsDefined();
     * ```
     * @see \Codeception\Module\Symfony::seeAllTranslationsDefined()
     */
    public function seeAllTranslationsDefined(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeAllTranslationsDefined', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that there are no missing translations and no fallback translations.
     *
     * ```php
     * <?php
     * $I->seeAllTranslationsDefined();
     * ```
     * @see \Codeception\Module\Symfony::seeAllTranslationsDefined()
     */
    public function canSeeAllTranslationsDefined(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeAllTranslationsDefined', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the default locale is the expected one.
     *
     * ```php
     * <?php
     * $I->seeDefaultLocaleIs('en');
     * ```
     *
     * @param string $expectedLocale The expected default locale
     * @see \Codeception\Module\Symfony::seeDefaultLocaleIs()
     */
    public function seeDefaultLocaleIs(string $expectedLocale): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeDefaultLocaleIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the default locale is the expected one.
     *
     * ```php
     * <?php
     * $I->seeDefaultLocaleIs('en');
     * ```
     *
     * @param string $expectedLocale The expected default locale
     * @see \Codeception\Module\Symfony::seeDefaultLocaleIs()
     */
    public function canSeeDefaultLocaleIs(string $expectedLocale): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeDefaultLocaleIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the fallback locales match the expected ones.
     *
     * ```php
     * <?php
     * $I->seeFallbackLocalesAre(['es', 'fr']);
     * ```
     *
     * @param string[] $expectedLocales The expected fallback locales
     * @see \Codeception\Module\Symfony::seeFallbackLocalesAre()
     */
    public function seeFallbackLocalesAre(array $expectedLocales): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFallbackLocalesAre', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the fallback locales match the expected ones.
     *
     * ```php
     * <?php
     * $I->seeFallbackLocalesAre(['es', 'fr']);
     * ```
     *
     * @param string[] $expectedLocales The expected fallback locales
     * @see \Codeception\Module\Symfony::seeFallbackLocalesAre()
     */
    public function canSeeFallbackLocalesAre(array $expectedLocales): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFallbackLocalesAre', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the count of fallback translations is less than the given limit.
     *
     * ```php
     * <?php
     * $I->seeFallbackTranslationsCountLessThan(10);
     * ```
     *
     * @param int $limit Maximum count of fallback translations
     * @see \Codeception\Module\Symfony::seeFallbackTranslationsCountLessThan()
     */
    public function seeFallbackTranslationsCountLessThan(int $limit): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFallbackTranslationsCountLessThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the count of fallback translations is less than the given limit.
     *
     * ```php
     * <?php
     * $I->seeFallbackTranslationsCountLessThan(10);
     * ```
     *
     * @param int $limit Maximum count of fallback translations
     * @see \Codeception\Module\Symfony::seeFallbackTranslationsCountLessThan()
     */
    public function canSeeFallbackTranslationsCountLessThan(int $limit): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFallbackTranslationsCountLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the count of missing translations is less than the given limit.
     *
     * ```php
     * <?php
     * $I->seeMissingTranslationsCountLessThan(5);
     * ```
     *
     * @param int $limit Maximum count of missing translations
     * @see \Codeception\Module\Symfony::seeMissingTranslationsCountLessThan()
     */
    public function seeMissingTranslationsCountLessThan(int $limit): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeMissingTranslationsCountLessThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the count of missing translations is less than the given limit.
     *
     * ```php
     * <?php
     * $I->seeMissingTranslationsCountLessThan(5);
     * ```
     *
     * @param int $limit Maximum count of missing translations
     * @see \Codeception\Module\Symfony::seeMissingTranslationsCountLessThan()
     */
    public function canSeeMissingTranslationsCountLessThan(int $limit): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeMissingTranslationsCountLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the time a request lasted is less than expected.
     *
     * If the page performed an HTTP redirect, only the time of the last request will be taken into account.
     * You can modify this behavior using [stopFollowingRedirects()](https://codeception.com/docs/modules/Symfony#stopFollowingRedirects) first.
     *
     * Also, note that using code coverage can significantly increase the time it takes to resolve a request,
     * which could lead to unreliable results when used together.
     *
     * It is recommended to set [`rebootable_client`](https://codeception.com/docs/modules/Symfony#Config) to `true` (=default),
     * cause otherwise this assertion gives false results if you access multiple pages in a row, or if your app performs a redirect.
     *
     * @param int|float $expectedMilliseconds The expected time in milliseconds
     * @see \Codeception\Module\Symfony::seeRequestTimeIsLessThan()
     */
    public function seeRequestTimeIsLessThan(int|float $expectedMilliseconds): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeRequestTimeIsLessThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the time a request lasted is less than expected.
     *
     * If the page performed an HTTP redirect, only the time of the last request will be taken into account.
     * You can modify this behavior using [stopFollowingRedirects()](https://codeception.com/docs/modules/Symfony#stopFollowingRedirects) first.
     *
     * Also, note that using code coverage can significantly increase the time it takes to resolve a request,
     * which could lead to unreliable results when used together.
     *
     * It is recommended to set [`rebootable_client`](https://codeception.com/docs/modules/Symfony#Config) to `true` (=default),
     * cause otherwise this assertion gives false results if you access multiple pages in a row, or if your app performs a redirect.
     *
     * @param int|float $expectedMilliseconds The expected time in milliseconds
     * @see \Codeception\Module\Symfony::seeRequestTimeIsLessThan()
     */
    public function canSeeRequestTimeIsLessThan(int|float $expectedMilliseconds): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeRequestTimeIsLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a template was not rendered in the response.
     *
     * ```php
     * <?php
     * $I->dontSeeRenderedTemplate('home.html.twig');
     * ```
     * @see \Codeception\Module\Symfony::dontSeeRenderedTemplate()
     */
    public function dontSeeRenderedTemplate(string $template): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeRenderedTemplate', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that a template was not rendered in the response.
     *
     * ```php
     * <?php
     * $I->dontSeeRenderedTemplate('home.html.twig');
     * ```
     * @see \Codeception\Module\Symfony::dontSeeRenderedTemplate()
     */
    public function cantSeeRenderedTemplate(string $template): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeRenderedTemplate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the current template matches the expected template.
     *
     * ```php
     * <?php
     * $I->seeCurrentTemplateIs('home.html.twig');
     * ```
     * @see \Codeception\Module\Symfony::seeCurrentTemplateIs()
     */
    public function seeCurrentTemplateIs(string $expectedTemplate): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentTemplateIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the current template matches the expected template.
     *
     * ```php
     * <?php
     * $I->seeCurrentTemplateIs('home.html.twig');
     * ```
     * @see \Codeception\Module\Symfony::seeCurrentTemplateIs()
     */
    public function canSeeCurrentTemplateIs(string $expectedTemplate): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentTemplateIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a template was rendered in the response.
     * That includes templates built with [inheritance](https://twig.symfony.com/doc/3.x/templates.html#template-inheritance).
     *
     * ```php
     * <?php
     * $I->seeRenderedTemplate('home.html.twig');
     * $I->seeRenderedTemplate('layout.html.twig');
     * ```
     * @see \Codeception\Module\Symfony::seeRenderedTemplate()
     */
    public function seeRenderedTemplate(string $template): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeRenderedTemplate', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that a template was rendered in the response.
     * That includes templates built with [inheritance](https://twig.symfony.com/doc/3.x/templates.html#template-inheritance).
     *
     * ```php
     * <?php
     * $I->seeRenderedTemplate('home.html.twig');
     * $I->seeRenderedTemplate('layout.html.twig');
     * ```
     * @see \Codeception\Module\Symfony::seeRenderedTemplate()
     */
    public function canSeeRenderedTemplate(string $template): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeRenderedTemplate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given subject fails validation.
     * This assertion does not concern the exact number of violations.
     *
     * ```php
     * <?php
     * $I->dontSeeViolatedConstraint($subject);
     * $I->dontSeeViolatedConstraint($subject, 'propertyName');
     * $I->dontSeeViolatedConstraint($subject, 'propertyName', 'Symfony\Validator\ConstraintClass');
     * ```
     * @see \Codeception\Module\Symfony::dontSeeViolatedConstraint()
     */
    public function dontSeeViolatedConstraint(object $subject, ?string $propertyPath = NULL, ?string $constraint = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeViolatedConstraint', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the given subject fails validation.
     * This assertion does not concern the exact number of violations.
     *
     * ```php
     * <?php
     * $I->dontSeeViolatedConstraint($subject);
     * $I->dontSeeViolatedConstraint($subject, 'propertyName');
     * $I->dontSeeViolatedConstraint($subject, 'propertyName', 'Symfony\Validator\ConstraintClass');
     * ```
     * @see \Codeception\Module\Symfony::dontSeeViolatedConstraint()
     */
    public function cantSeeViolatedConstraint(object $subject, ?string $propertyPath = NULL, ?string $constraint = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeViolatedConstraint', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the given subject passes validation.
     * This assertion does not concern the exact number of violations.
     *
     * ```php
     * <?php
     * $I->seeViolatedConstraint($subject);
     * $I->seeViolatedConstraint($subject, 'propertyName');
     * $I->seeViolatedConstraint($subject, 'propertyName', 'Symfony\Validator\ConstraintClass');
     * ```
     * @see \Codeception\Module\Symfony::seeViolatedConstraint()
     */
    public function seeViolatedConstraint(object $subject, ?string $propertyPath = NULL, ?string $constraint = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeViolatedConstraint', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that the given subject passes validation.
     * This assertion does not concern the exact number of violations.
     *
     * ```php
     * <?php
     * $I->seeViolatedConstraint($subject);
     * $I->seeViolatedConstraint($subject, 'propertyName');
     * $I->seeViolatedConstraint($subject, 'propertyName', 'Symfony\Validator\ConstraintClass');
     * ```
     * @see \Codeception\Module\Symfony::seeViolatedConstraint()
     */
    public function canSeeViolatedConstraint(object $subject, ?string $propertyPath = NULL, ?string $constraint = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeViolatedConstraint', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the exact number of violations for the given subject.
     *
     * ```php
     * <?php
     * $I->seeViolatedConstraintsCount(3, $subject);
     * $I->seeViolatedConstraintsCount(2, $subject, 'propertyName');
     * ```
     * @see \Codeception\Module\Symfony::seeViolatedConstraintsCount()
     */
    public function seeViolatedConstraintsCount(int $expected, object $subject, ?string $propertyPath = NULL, ?string $constraint = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeViolatedConstraintsCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts the exact number of violations for the given subject.
     *
     * ```php
     * <?php
     * $I->seeViolatedConstraintsCount(3, $subject);
     * $I->seeViolatedConstraintsCount(2, $subject, 'propertyName');
     * ```
     * @see \Codeception\Module\Symfony::seeViolatedConstraintsCount()
     */
    public function canSeeViolatedConstraintsCount(int $expected, object $subject, ?string $propertyPath = NULL, ?string $constraint = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeViolatedConstraintsCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a constraint violation message or a part of it is present in the subject's violations.
     *
     * ```php
     * <?php
     * $I->seeViolatedConstraintMessage('too short', $user, 'address');
     * ```
     * @see \Codeception\Module\Symfony::seeViolatedConstraintMessage()
     */
    public function seeViolatedConstraintMessage(string $expected, object $subject, string $propertyPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeViolatedConstraintMessage', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that a constraint violation message or a part of it is present in the subject's violations.
     *
     * ```php
     * <?php
     * $I->seeViolatedConstraintMessage('too short', $user, 'address');
     * ```
     * @see \Codeception\Module\Symfony::seeViolatedConstraintMessage()
     */
    public function canSeeViolatedConstraintMessage(string $expected, object $subject, string $propertyPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeViolatedConstraintMessage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeader()
     */
    public function seeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeHttpHeader', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeader()
     */
    public function canSeeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are not there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeHttpHeader()
     */
    public function dontSeeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeHttpHeader', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are not there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeHttpHeader()
     */
    public function cantSeeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that http response header is received only once.
     * HTTP RFC2616 allows multiple response headers with the same name.
     * You can check that you didn't accidentally sent the same header twice.
     *
     * ``` php
     * <?php
     * $I->seeHttpHeaderOnce('Cache-Control');
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeaderOnce()
     */
    public function seeHttpHeaderOnce(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeHttpHeaderOnce', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that http response header is received only once.
     * HTTP RFC2616 allows multiple response headers with the same name.
     * You can check that you didn't accidentally sent the same header twice.
     *
     * ``` php
     * <?php
     * $I->seeHttpHeaderOnce('Cache-Control');
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeaderOnce()
     */
    public function canSeeHttpHeaderOnce(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeHttpHeaderOnce', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the value of the specified header name
     *
     * @param bool $first Whether to return the first value or all header values
     * @return string|array The first header value if $first is true, an array of values otherwise
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::grabHttpHeader()
     */
    public function grabHttpHeader(string $name, bool $first = true): array|string|null {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds Digest authentication via username/password.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amDigestAuthenticated()
     */
    public function amDigestAuthenticated(string $username, string $password): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amDigestAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds Bearer authentication via access token.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amBearerAuthenticated()
     */
    public function amBearerAuthenticated(string $accessToken): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amBearerAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds NTLM authentication via username/password.
     * Requires client to be Guzzle >=6.3.0
     * Out of scope for functional modules.
     *
     * Example:
     * ```php
     * <?php
     * $I->amNTLMAuthenticated('jon_snow', 'targaryen');
     * ```
     *
     * @throws \Codeception\Exception\ModuleException
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amNTLMAuthenticated()
     */
    public function amNTLMAuthenticated(string $username, string $password): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amNTLMAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a POST request to given uri. Parameters and files can be provided separately.
     *
     * Example:
     * ```php
     * <?php
     * //simple POST call
     * $response = $I->sendPost('/message', ['subject' => 'Read this!', 'to' => 'johndoe@example.com']);
     * //simple upload method
     * $I->sendPost('/message/24', ['inline' => 0], ['attachmentFile' => codecept_data_dir('sample_file.pdf')]);
     * //uploading a file with a custom name and mime-type. This is also useful to simulate upload errors.
     * $I->sendPost('/message/24', ['inline' => 0], [
     *     'attachmentFile' => [
     *          'name' => 'document.pdf',
     *          'type' => 'application/pdf',
     *          'error' => UPLOAD_ERR_OK,
     *          'size' => filesize(codecept_data_dir('sample_file.pdf')),
     *          'tmp_name' => codecept_data_dir('sample_file.pdf')
     *     ]
     * ]);
     * // If your field names contain square brackets (e.g. `<input type="text" name="form[task]">`),
     * // PHP parses them into an array. In this case you need to pass the fields like this:
     * $I->sendPost('/add-task', ['form' => [
     *     'task' => 'lorem ipsum',
     *     'category' => 'miscellaneous',
     * ]]);
     * ```
     *
     * @param array|string|\JsonSerializable $params
     * @param array $files A list of filenames or "mocks" of $_FILES (each entry being an array with the following
     *                     keys: name, type, error, size, tmp_name (pointing to the real file path). Each key works
     *                     as the "name" attribute of a file input field.
     *
     * @see https://php.net/manual/en/features.file-upload.post-method.php
     * @see codecept_data_dir()
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendPost()
     */
    public function sendPost(string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendPost', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a HEAD request to given uri.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendHead()
     */
    public function sendHead(string $url, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendHead', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an OPTIONS request to given uri.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendOptions()
     */
    public function sendOptions(string $url, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendOptions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a GET request to given uri.
     *
     * ```php
     * <?php
     * $response = $I->sendGet('/users');
     *
     * // send get with query params
     * $I->sendGet('/orders', ['id' => 1])
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendGet()
     */
    public function sendGet(string $url, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendGet', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends PUT request to given uri.
     *
     * ```php
     * <?php
     * $response = $I->sendPut('/message/1', ['subject' => 'Read this!']);
     * ```
     *
     * @param array|string|\JsonSerializable $params
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendPut()
     */
    public function sendPut(string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendPut', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends PATCH request to given uri.
     *
     * ```php
     * <?php
     * $response = $I->sendPatch('/message/1', ['subject' => 'Read this!']);
     * ```
     *
     * @param array|string|\JsonSerializable $params
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendPatch()
     */
    public function sendPatch(string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendPatch', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends DELETE request to given uri.
     *
     * ```php
     * <?php
     * $I->sendDelete('/message/1');
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendDelete()
     */
    public function sendDelete(string $url, array $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendDelete', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a HTTP request.
     *
     * @param array|string|\JsonSerializable $params
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::send()
     */
    public function send(string $method, string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('send', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends LINK request to given uri.
     *
     * @param array $linkEntries (entry is array with keys "uri" and "link-param")
     *
     * @link https://tools.ietf.org/html/rfc2068#section-19.6.2.4
     *
     * @author samva.ua@gmail.com
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendLink()
     */
    public function sendLink(string $url, array $linkEntries): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends UNLINK request to given uri.
     *
     * @param array $linkEntries (entry is array with keys "uri" and "link-param")
     * @link https://tools.ietf.org/html/rfc2068#section-19.6.2.4
     * @author samva.ua@gmail.com
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendUnlink()
     */
    public function sendUnlink(string $url, array $linkEntries): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendUnlink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response was valid JSON.
     * This is done with json_last_error function.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsJson()
     */
    public function seeResponseIsJson(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseIsJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response was valid JSON.
     * This is done with json_last_error function.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsJson()
     */
    public function canSeeResponseIsJson(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseIsJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether the last response contains text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseContains()
     */
    public function seeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether the last response contains text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseContains()
     */
    public function canSeeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response do not contain text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseContains()
     */
    public function dontSeeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response do not contain text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseContains()
     */
    public function cantSeeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether the last JSON response contains provided array.
     * The response is converted to array with json_decode($response, true)
     * Thus, JSON is represented by associative array.
     * This method matches that response array contains provided array.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {name: john, email: john@gmail.com}
     * $I->seeResponseContainsJson(array('name' => 'john'));
     *
     * // response {user: john, profile: { email: john@gmail.com }}
     * $I->seeResponseContainsJson(array('email' => 'john@gmail.com'));
     *
     * ```
     *
     * This method recursively checks if one array can be found inside of another.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseContainsJson()
     */
    public function seeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseContainsJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether the last JSON response contains provided array.
     * The response is converted to array with json_decode($response, true)
     * Thus, JSON is represented by associative array.
     * This method matches that response array contains provided array.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {name: john, email: john@gmail.com}
     * $I->seeResponseContainsJson(array('name' => 'john'));
     *
     * // response {user: john, profile: { email: john@gmail.com }}
     * $I->seeResponseContainsJson(array('email' => 'john@gmail.com'));
     *
     * ```
     *
     * This method recursively checks if one array can be found inside of another.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseContainsJson()
     */
    public function canSeeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseContainsJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as json string.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {"name": "john", "age": 20}
     * $I->seeResponseIsValidOnJsonSchemaString('{"type": "object"}');
     *
     * // response {"name": "john", "age": 20}
     * $schema = [
     *  'properties' => [
     *      'age' => [
     *          'type' => 'integer',
     *          'minimum' => 18
     *      ]
     *  ]
     * ];
     * $I->seeResponseIsValidOnJsonSchemaString(json_encode($schema));
     *
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchemaString()
     */
    public function seeResponseIsValidOnJsonSchemaString(string $schema): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseIsValidOnJsonSchemaString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as json string.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {"name": "john", "age": 20}
     * $I->seeResponseIsValidOnJsonSchemaString('{"type": "object"}');
     *
     * // response {"name": "john", "age": 20}
     * $schema = [
     *  'properties' => [
     *      'age' => [
     *          'type' => 'integer',
     *          'minimum' => 18
     *      ]
     *  ]
     * ];
     * $I->seeResponseIsValidOnJsonSchemaString(json_encode($schema));
     *
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchemaString()
     */
    public function canSeeResponseIsValidOnJsonSchemaString(string $schema): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseIsValidOnJsonSchemaString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as relative file path in your project directory or an absolute path
     *
     * @part json
     * @see codecept_absolute_path()
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchema()
     */
    public function seeResponseIsValidOnJsonSchema(string $schemaFilename): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseIsValidOnJsonSchema', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as relative file path in your project directory or an absolute path
     *
     * @part json
     * @see codecept_absolute_path()
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchema()
     */
    public function canSeeResponseIsValidOnJsonSchema(string $schemaFilename): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseIsValidOnJsonSchema', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns current response so that it can be used in next scenario steps.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $user_id = $I->grabResponse();
     * $I->sendPut('/user', array('id' => $user_id, 'name' => 'davert'));
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::grabResponse()
     */
    public function grabResponse(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabResponse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Even for a single value an array is returned.
     * Example:
     *
     * ``` php
     * <?php
     * // match the first `user.id` in json
     * $firstUserId = $I->grabDataFromResponseByJsonPath('$..users[0].id');
     * $I->sendPut('/user', array('id' => $firstUserId[0], 'name' => 'davert'));
     * ```
     *
     * @return array Array of matching items
     * @throws \Exception
     * @part json
     * @see \Codeception\Module\REST::grabDataFromResponseByJsonPath()
     */
    public function grabDataFromResponseByJsonPath(string $jsonPath): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabDataFromResponseByJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if json structure in response matches the xpath provided.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book/author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book[1]/author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesXpath('/store//price');
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesXpath()
     */
    public function seeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonMatchesXpath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if json structure in response matches the xpath provided.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book/author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book[1]/author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesXpath('/store//price');
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesXpath()
     */
    public function canSeeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonMatchesXpath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if applying xpath to json structure in response matches the expected result.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonXpathEvaluatesTo('count(//store/book/author) > 0', true);
     * // count the number of books written by given author is 5
     * $I->seeResponseJsonMatchesXpath("//author[text() = 'Nigel Rees']", 1.0);
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonXpathEvaluatesTo()
     */
    public function seeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonXpathEvaluatesTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if applying xpath to json structure in response matches the expected result.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonXpathEvaluatesTo('count(//store/book/author) > 0', true);
     * // count the number of books written by given author is 5
     * $I->seeResponseJsonMatchesXpath("//author[text() = 'Nigel Rees']", 1.0);
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonXpathEvaluatesTo()
     */
    public function canSeeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonXpathEvaluatesTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to seeResponseJsonXpathEvaluatesTo
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonXpathEvaluatesTo()
     */
    public function dontSeeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseJsonXpathEvaluatesTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to seeResponseJsonXpathEvaluatesTo
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonXpathEvaluatesTo()
     */
    public function cantSeeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseJsonXpathEvaluatesTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to seeResponseJsonMatchesXpath
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesXpath()
     */
    public function dontSeeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseJsonMatchesXpath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to seeResponseJsonMatchesXpath
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesXpath()
     */
    public function cantSeeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseJsonMatchesXpath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Checks if JSON structure in response matches JSONPath.
     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[*].author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[0].author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesJsonPath('$.store..price');
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesJsonPath()
     */
    public function seeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonMatchesJsonPath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Checks if JSON structure in response matches JSONPath.
     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[*].author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[0].author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesJsonPath('$.store..price');
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesJsonPath()
     */
    public function canSeeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonMatchesJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Opposite to [`seeResponseJsonMatchesJsonPath()`](#seeResponseJsonMatchesJsonPath)
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesJsonPath()
     */
    public function dontSeeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseJsonMatchesJsonPath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Opposite to [`seeResponseJsonMatchesJsonPath()`](#seeResponseJsonMatchesJsonPath)
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesJsonPath()
     */
    public function cantSeeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseJsonMatchesJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to seeResponseContainsJson
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseContainsJson()
     */
    public function dontSeeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseContainsJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to seeResponseContainsJson
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseContainsJson()
     */
    public function cantSeeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseContainsJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that JSON matches provided types.
     * In case you don't know the actual values of JSON data returned you can match them by type.
     * It starts the check with a root element. If JSON data is an array it will check all elements of it.
     * You can specify the path in the json which should be checked with JsonPath
     *
     * Basic example:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'is_active': false}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer',
     *      'name' => 'string|null',
     *      'is_active' => 'boolean'
     * ]);
     *
     * // narrow down matching with JsonPath:
     * // {"users": [{ "name": "davert"}, {"id": 1}]}
     * $I->seeResponseMatchesJsonType(['name' => 'string'], '$.users[0]');
     * ```
     *
     * You can check if the record contains fields with the data types you expect.
     * The list of possible data types:
     *
     * * string
     * * integer
     * * float
     * * array (json object is array as well)
     * * boolean
     * * null
     *
     * You can also use nested data type structures, and define multiple types for the same field:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'company': {'name': 'Codegyre'}}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer|string', // multiple types
     *      'company' => ['name' => 'string']
     * ]);
     * ```
     *
     * You can also apply filters to check values. Filter can be applied with a `:` char after the type declaration,
     * or after another filter if you need more than one.
     *
     * Here is the list of possible filters:
     *
     * * `array:empty` - check that value is an empty array
     * * `integer:>{val}` - checks that integer is greater than {val} (works with float and string types too).
     * * `integer:<{val}` - checks that integer is lower than {val} (works with float and string types too).
     * * `string:url` - checks that value is valid url.
     * * `string:date` - checks that value is date in JavaScript format: https://weblog.west-wind.com/posts/2014/Jan/06/JavaScript-JSON-Date-Parsing-and-real-Dates
     * * `string:email` - checks that value is a valid email according to https://emailregex.com/
     * * `string:regex({val})` - checks that string matches a regex provided with {val}
     *
     * This is how filters can be used:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'email' => 'davert@codeception.com'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0:<1000', // multiple filters can be used
     *      'email' => 'string:regex(~\@~)' // we just check that @ char is included
     * ]);
     *
     * // {'user_id': '1'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0', // works with strings as well
     * ]);
     * ```
     *
     * You can also add custom filters by using `{@link JsonType::addCustomFilter()}`.
     * See [JsonType reference](https://codeception.com/docs/reference/JsonType).
     *
     * @part json
     * @see JsonType
     * @see \Codeception\Module\REST::seeResponseMatchesJsonType()
     */
    public function seeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseMatchesJsonType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that JSON matches provided types.
     * In case you don't know the actual values of JSON data returned you can match them by type.
     * It starts the check with a root element. If JSON data is an array it will check all elements of it.
     * You can specify the path in the json which should be checked with JsonPath
     *
     * Basic example:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'is_active': false}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer',
     *      'name' => 'string|null',
     *      'is_active' => 'boolean'
     * ]);
     *
     * // narrow down matching with JsonPath:
     * // {"users": [{ "name": "davert"}, {"id": 1}]}
     * $I->seeResponseMatchesJsonType(['name' => 'string'], '$.users[0]');
     * ```
     *
     * You can check if the record contains fields with the data types you expect.
     * The list of possible data types:
     *
     * * string
     * * integer
     * * float
     * * array (json object is array as well)
     * * boolean
     * * null
     *
     * You can also use nested data type structures, and define multiple types for the same field:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'company': {'name': 'Codegyre'}}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer|string', // multiple types
     *      'company' => ['name' => 'string']
     * ]);
     * ```
     *
     * You can also apply filters to check values. Filter can be applied with a `:` char after the type declaration,
     * or after another filter if you need more than one.
     *
     * Here is the list of possible filters:
     *
     * * `array:empty` - check that value is an empty array
     * * `integer:>{val}` - checks that integer is greater than {val} (works with float and string types too).
     * * `integer:<{val}` - checks that integer is lower than {val} (works with float and string types too).
     * * `string:url` - checks that value is valid url.
     * * `string:date` - checks that value is date in JavaScript format: https://weblog.west-wind.com/posts/2014/Jan/06/JavaScript-JSON-Date-Parsing-and-real-Dates
     * * `string:email` - checks that value is a valid email according to https://emailregex.com/
     * * `string:regex({val})` - checks that string matches a regex provided with {val}
     *
     * This is how filters can be used:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'email' => 'davert@codeception.com'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0:<1000', // multiple filters can be used
     *      'email' => 'string:regex(~\@~)' // we just check that @ char is included
     * ]);
     *
     * // {'user_id': '1'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0', // works with strings as well
     * ]);
     * ```
     *
     * You can also add custom filters by using `{@link JsonType::addCustomFilter()}`.
     * See [JsonType reference](https://codeception.com/docs/reference/JsonType).
     *
     * @part json
     * @see JsonType
     * @see \Codeception\Module\REST::seeResponseMatchesJsonType()
     */
    public function canSeeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseMatchesJsonType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to `seeResponseMatchesJsonType`.
     *
     * @part json
     * @param array $jsonType JsonType structure
     * @see seeResponseMatchesJsonType
     * @see \Codeception\Module\REST::dontSeeResponseMatchesJsonType()
     */
    public function dontSeeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseMatchesJsonType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to `seeResponseMatchesJsonType`.
     *
     * @part json
     * @param array $jsonType JsonType structure
     * @see seeResponseMatchesJsonType
     * @see \Codeception\Module\REST::dontSeeResponseMatchesJsonType()
     */
    public function cantSeeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseMatchesJsonType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if response is exactly the same as provided.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseEquals()
     */
    public function seeResponseEquals($expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if response is exactly the same as provided.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseEquals()
     */
    public function canSeeResponseEquals($expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the hash of a binary response is exactly the same as provided.
     * Parameter can be passed as any hash string supported by `hash()`, with an
     * optional second parameter to specify the hash type, which defaults to sha1.
     *
     * Example: Using sha1 hash key
     *
     * ```php
     * <?php
     * $I->seeBinaryResponseEquals('df589122eac0f6a7bd8795436e692e3675cadc3b');
     * ```
     *
     * Example: Using sha1 for a file contents
     *
     * ```php
     * <?php
     * $fileData = file_get_contents('test_file.jpg');
     * $I->seeBinaryResponseEquals(md5($fileData));
     * ```
     * Example: Using sha256 hash
     *
     * ```php
     * <?php
     * $fileData = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k='; // very small jpeg
     * $I->seeBinaryResponseEquals(hash('sha256', base64_decode($fileData)), 'sha256');
     * ```
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default sha1.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeBinaryResponseEquals()
     */
    public function seeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeBinaryResponseEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the hash of a binary response is exactly the same as provided.
     * Parameter can be passed as any hash string supported by `hash()`, with an
     * optional second parameter to specify the hash type, which defaults to sha1.
     *
     * Example: Using sha1 hash key
     *
     * ```php
     * <?php
     * $I->seeBinaryResponseEquals('df589122eac0f6a7bd8795436e692e3675cadc3b');
     * ```
     *
     * Example: Using sha1 for a file contents
     *
     * ```php
     * <?php
     * $fileData = file_get_contents('test_file.jpg');
     * $I->seeBinaryResponseEquals(md5($fileData));
     * ```
     * Example: Using sha256 hash
     *
     * ```php
     * <?php
     * $fileData = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k='; // very small jpeg
     * $I->seeBinaryResponseEquals(hash('sha256', base64_decode($fileData)), 'sha256');
     * ```
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default sha1.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeBinaryResponseEquals()
     */
    public function canSeeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeBinaryResponseEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the hash of a binary response is not the same as provided.
     *
     * ```php
     * <?php
     * $I->dontSeeBinaryResponseEquals('8c90748342f19b195b9c6b4eff742ded');
     * ```
     * Opposite to `seeBinaryResponseEquals`
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default md5.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeBinaryResponseEquals()
     */
    public function dontSeeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeBinaryResponseEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the hash of a binary response is not the same as provided.
     *
     * ```php
     * <?php
     * $I->dontSeeBinaryResponseEquals('8c90748342f19b195b9c6b4eff742ded');
     * ```
     * Opposite to `seeBinaryResponseEquals`
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default md5.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeBinaryResponseEquals()
     */
    public function cantSeeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeBinaryResponseEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * HOOK to be executed when config changes with `_reconfigure`.
     * @see \Codeception\Module\Doctrine::onReconfigure()
     */
    public function onReconfigure(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('onReconfigure', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs $em->flush();
     * @see \Codeception\Module\Doctrine::flushToDatabase()
     */
    public function flushToDatabase(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('flushToDatabase', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs $em->refresh() on every passed entity:
     *
     * ``` php
     * $I->refreshEntities($user);
     * $I->refreshEntities([$post1, $post2, $post3]]);
     * ```
     *
     * This can useful in acceptance tests where entity can become invalid due to
     * external (relative to entity manager used in tests) changes.
     *
     * @param object|object[] $entities
     * @see \Codeception\Module\Doctrine::refreshEntities()
     */
    public function refreshEntities($entities): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('refreshEntities', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs $em->clear():
     *
     * ``` php
     * $I->clearEntityManager();
     * ```
     * @see \Codeception\Module\Doctrine::clearEntityManager()
     */
    public function clearEntityManager(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('clearEntityManager', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mocks the repository.
     *
     * With this action you can redefine any method of any repository.
     * Please, note: this fake repositories will be accessible through entity manager till the end of test.
     *
     * Example:
     *
     * ``` php
     * <?php
     *
     * $I->haveFakeRepository(User::class, ['findByUsername' => function($username) { return null; }]);
     *
     * ```
     *
     * This creates a stub class for Entity\User repository with redefined method findByUsername,
     * which will always return the NULL value.
     *
     * @param class-string $className
     * @param array<string, callable> $methods
     * @see \Codeception\Module\Doctrine::haveFakeRepository()
     */
    public function haveFakeRepository(string $className, array $methods = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveFakeRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Persists a record into the repository.
     * This method creates an entity, and sets its properties directly (via reflection).
     * Setters of the entity won't be executed, but you can create almost any entity and save it to the database.
     * If the entity has a constructor, for optional parameters the default value will be used and for non-optional parameters the given fields (with a matching name) will be passed when calling the constructor before the properties get set directly (via reflection).
     *
     * Returns the primary key of the newly created entity. The primary key value is extracted using Reflection API.
     * If the primary key is composite, an array of values is returned.
     *
     * ```php
     * $I->haveInRepository(User::class, ['name' => 'davert']);
     * ```
     *
     * This method also accepts instances as first argument, which is useful when the entity constructor
     * has some arguments:
     *
     * ```php
     * $I->haveInRepository(new User($arg), ['name' => 'davert']);
     * ```
     *
     * Alternatively, constructor arguments can be passed by name. Given User constructor signature is `__constructor($arg)`, the example above could be rewritten like this:
     *
     * ```php
     * $I->haveInRepository(User::class, ['arg' => $arg, 'name' => 'davert']);
     * ```
     *
     * If the entity has relations, they can be populated too. In case of
     * [OneToMany](https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html#one-to-many-bidirectional)
     * the following format is expected:
     *
     * ```php
     * $I->haveInRepository(User::class, [
     *     'name' => 'davert',
     *     'posts' => [
     *         ['title' => 'Post 1'],
     *         ['title' => 'Post 2'],
     *     ],
     * ]);
     * ```
     *
     * For [ManyToOne](https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html#many-to-one-unidirectional)
     * the format is slightly different:
     *
     * ```php
     * $I->haveInRepository(User::class, [
     *     'name' => 'davert',
     *     'post' => [
     *         'title' => 'Post 1',
     *     ],
     * ]);
     * ```
     *
     * This works recursively, so you can create deep structures in a single call.
     *
     * Note that `$em->persist()`, `$em->refresh()`, and `$em->flush()` are called every time.
     *
     * @template T of object
     * @param class-string<T>|T $classNameOrInstance
     * @param array $data
     * @return mixed
     * @see \Codeception\Module\Doctrine::haveInRepository()
     */
    public function haveInRepository($classNameOrInstance, array $data = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Loads fixtures. Fixture can be specified as a fully qualified class name,
     * an instance, or an array of class names/instances.
     *
     * ```php
     * <?php
     * $I->loadFixtures(AppFixtures::class);
     * $I->loadFixtures([AppFixtures1::class, AppFixtures2::class]);
     * $I->loadFixtures(new AppFixtures);
     * ```
     *
     * By default fixtures are loaded in 'append' mode. To replace all
     * data in database, use `false` as second parameter:
     *
     * ```php
     * <?php
     * $I->loadFixtures(AppFixtures::class, false);
     * ```
     *
     * This method requires [`doctrine/data-fixtures`](https://github.com/doctrine/data-fixtures) to be installed.
     *
     * @param class-string<FixtureInterface>|class-string<FixtureInterface>[]|list<FixtureInterface> $fixtures
     * @param bool $append
     * @throws ModuleException
     * @throws ModuleRequireException
     * @see \Codeception\Module\Doctrine::loadFixtures()
     */
    public function loadFixtures($fixtures, bool $append = true): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('loadFixtures', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Flushes changes to database, and executes a query with parameters defined in an array.
     * You can use entity associations to build complex queries.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->seeInRepository(User::class, ['name' => 'davert']);
     * $I->seeInRepository(User::class, ['name' => 'davert', 'Company' => ['name' => 'Codegyre']]);
     * $I->seeInRepository(Client::class, ['User' => ['Company' => ['name' => 'Codegyre']]]);
     * ```
     *
     * Fails if record for given criteria can\'t be found,
     *
     * @param class-string $entity
     * @param array $params
     * @return void
     * @see \Codeception\Module\Doctrine::seeInRepository()
     */
    public function seeInRepository(string $entity, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInRepository', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Flushes changes to database, and executes a query with parameters defined in an array.
     * You can use entity associations to build complex queries.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->seeInRepository(User::class, ['name' => 'davert']);
     * $I->seeInRepository(User::class, ['name' => 'davert', 'Company' => ['name' => 'Codegyre']]);
     * $I->seeInRepository(Client::class, ['User' => ['Company' => ['name' => 'Codegyre']]]);
     * ```
     *
     * Fails if record for given criteria can\'t be found,
     *
     * @param class-string $entity
     * @param array $params
     * @return void
     * @see \Codeception\Module\Doctrine::seeInRepository()
     */
    public function canSeeInRepository(string $entity, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Flushes changes to database and performs `findOneBy()` call for current repository.
     *
     * @param class-string $entity
     * @param array $params
     * @return void
     * @see \Codeception\Module\Doctrine::dontSeeInRepository()
     */
    public function dontSeeInRepository(string $entity, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInRepository', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Flushes changes to database and performs `findOneBy()` call for current repository.
     *
     * @param class-string $entity
     * @param array $params
     * @return void
     * @see \Codeception\Module\Doctrine::dontSeeInRepository()
     */
    public function cantSeeInRepository(string $entity, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects field value from repository.
     * It builds a query based on an array of parameters.
     * You can use entity associations to build complex queries.
     * For Symfony users, it's recommended to [use the entity's repository instead](#Grabbing-Entities-with-Symfony)
     *
     * Example:
     *
     * ``` php
     * <?php
     * $email = $I->grabFromRepository(User::class, 'email', ['name' => 'davert']);
     * ```
     *
     * @param class-string $entity
     * @param string $field
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\Doctrine::grabFromRepository()
     */
    public function grabFromRepository(string $entity, string $field, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects entities from repository.
     * It builds a query based on an array of parameters.
     * You can use entity associations to build complex queries.
     * For Symfony users, it's recommended to [use the entity's repository instead](#Grabbing-Entities-with-Symfony)
     *
     * Example:
     *
     * ``` php
     * <?php
     * $users = $I->grabEntitiesFromRepository(User::class, ['name' => 'davert']);
     * ```
     *
     * @template T of object
     * @param class-string<T> $entity
     * @param array $params . For `IS NULL`, use `['field' => null]`
     * @return list<T>
     * @see \Codeception\Module\Doctrine::grabEntitiesFromRepository()
     */
    public function grabEntitiesFromRepository(string $entity, array $params = []): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabEntitiesFromRepository', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects a single entity from repository.
     * It builds a query based on an array of parameters.
     * You can use entity associations to build complex queries.
     * For Symfony users, it's recommended to [use the entity's repository instead](#Grabbing-Entities-with-Symfony)
     *
     * Example:
     *
     * ``` php
     * <?php
     * $user = $I->grabEntityFromRepository(User::class, ['id' => '1234']);
     * ```
     *
     * @template T of object
     * @param class-string<T> $entity
     * @param array $params . For `IS NULL`, use `['field' => null]`
     * @return T
     * @version 1.1
     * @see \Codeception\Module\Doctrine::grabEntityFromRepository()
     */
    public function grabEntityFromRepository(string $entity, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabEntityFromRepository', func_get_args()));
    }
}
